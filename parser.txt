Grammar:

Rule 0     S' -> program
Rule 1     program -> decl_list
Rule 2     decl_list -> decl
Rule 3     decl_list -> decl_list decl
Rule 4     decl -> fun_decl
Rule 5     decl -> var_decl
Rule 6     var_decl -> type_spec IDENT [ ] ;
Rule 7     var_decl -> type_spec IDENT ;
Rule 8     type_spec -> CHAR
Rule 9     type_spec -> FLOAT
Rule 10    type_spec -> INT
Rule 11    type_spec -> BOOL
Rule 12    type_spec -> VOID
Rule 13    fun_decl -> type_spec IDENT ( params ) compound_stmt  [precedence=left, level=10]
Rule 14    params -> empty
Rule 15    params -> VOID
Rule 16    params -> param_list
Rule 17    param_list -> param
Rule 18    param_list -> param_list , param  [precedence=left, level=1]
Rule 19    param -> type_spec IDENT [ ]  [precedence=left, level=10]
Rule 20    param -> type_spec IDENT
Rule 21    compound_stmt -> { local_decls stmt_list }
Rule 22    local_decls -> empty
Rule 23    local_decls -> local_decls local_decl
Rule 24    local_decl -> type_spec IDENT [ ] ;
Rule 25    local_decl -> type_spec IDENT ;
Rule 26    stmt_list -> empty
Rule 27    stmt_list -> stmt_list stmt
Rule 28    stmt -> break_stmt
Rule 29    stmt -> return_stmt
Rule 30    stmt -> for_stmt
Rule 31    stmt -> while_stmt
Rule 32    stmt -> if_stmt
Rule 33    stmt -> compound_stmt
Rule 34    stmt -> expr_stmt
Rule 35    expr_stmt -> ;
Rule 36    expr_stmt -> expr ;
Rule 37    while_stmt -> WHILE ( expr ) stmt  [precedence=left, level=10]
Rule 38    for_stmt -> FOR ( expr ; expr ; expr ) stmt  [precedence=left, level=10]
Rule 39    if_stmt -> IF ( expr ) stmt ELSE stmt
Rule 40    if_stmt -> IF ( expr ) stmt  [precedence=left, level=10]
Rule 41    return_stmt -> RETURN expr ;
Rule 42    return_stmt -> RETURN ;
Rule 43    break_stmt -> BREAK ;
Rule 44    expr -> NEW type_spec [ expr ]  [precedence=left, level=10]
Rule 45    expr -> STRING_LIT
Rule 46    expr -> CHAR_LIT
Rule 47    expr -> FLOAT_LIT
Rule 48    expr -> INT_LIT
Rule 49    expr -> FALSE
Rule 50    expr -> TRUE
Rule 51    expr -> BOOL_LIT
Rule 52    expr -> IDENT . SIZE
Rule 53    expr -> IDENT ( args )  [precedence=left, level=10]
Rule 54    expr -> IDENT [ expr ]  [precedence=left, level=10]
Rule 55    expr -> IDENT DEC  [precedence=left, level=10]
Rule 56    expr -> IDENT INC  [precedence=left, level=10]
Rule 57    expr -> DEC IDENT  [precedence=right, level=9]
Rule 58    expr -> INC IDENT  [precedence=right, level=9]
Rule 59    expr -> IDENT
Rule 60    expr -> ( expr )  [precedence=left, level=10]
Rule 61    expr -> PLUS expr  [precedence=right, level=9]
Rule 62    expr -> MINUS expr  [precedence=right, level=9]
Rule 63    expr -> ! expr  [precedence=right, level=9]
Rule 64    expr -> expr MOD expr  [precedence=left, level=8]
Rule 65    expr -> expr DIVIDE expr  [precedence=left, level=8]
Rule 66    expr -> expr TIMES expr  [precedence=left, level=8]
Rule 67    expr -> expr - expr  [precedence=left, level=7]
Rule 68    expr -> expr + expr  [precedence=left, level=7]
Rule 69    expr -> expr > expr  [precedence=left, level=6]
Rule 70    expr -> expr GE expr  [precedence=left, level=6]
Rule 71    expr -> expr < expr  [precedence=left, level=6]
Rule 72    expr -> expr LE expr  [precedence=left, level=6]
Rule 73    expr -> expr NE expr  [precedence=left, level=5]
Rule 74    expr -> expr EQ expr  [precedence=left, level=5]
Rule 75    expr -> expr AND expr  [precedence=left, level=4]
Rule 76    expr -> expr OR expr  [precedence=left, level=3]
Rule 77    expr -> IDENT [ expr ] = expr  [precedence=right, level=2]
Rule 78    expr -> IDENT MODASSIGN expr  [precedence=right, level=2]
Rule 79    expr -> IDENT DIVASSIGN expr  [precedence=right, level=2]
Rule 80    expr -> IDENT MULASSIGN expr  [precedence=right, level=2]
Rule 81    expr -> IDENT SUBASSIGN expr  [precedence=right, level=2]
Rule 82    expr -> IDENT ADDASSIGN expr  [precedence=right, level=2]
Rule 83    expr -> IDENT = expr  [precedence=right, level=2]
Rule 84    arg_list -> expr
Rule 85    arg_list -> arg_list , expr  [precedence=left, level=1]
Rule 86    args -> empty
Rule 87    args -> arg_list
Rule 88    empty -> <empty>

Terminals, with rules where they appear:

!                    : 63
(                    : 13 37 38 39 40 53 60
)                    : 13 37 38 39 40 53 60
+                    : 68
,                    : 18 85
-                    : 67
.                    : 52
;                    : 6 7 24 25 35 36 38 38 41 42 43
<                    : 71
=                    : 77 83
>                    : 69
ADDASSIGN            : 82
AND                  : 75
BOOL                 : 11
BOOL_LIT             : 51
BREAK                : 43
CHAR                 : 8
CHAR_LIT             : 46
DEC                  : 55 57
DIVASSIGN            : 79
DIVIDE               : 65
ELSE                 : 39
EQ                   : 74
FALSE                : 49
FLOAT                : 9
FLOAT_LIT            : 47
FOR                  : 38
GE                   : 70
IDENT                : 6 7 13 19 20 24 25 52 53 54 55 56 57 58 59 77 78 79 80 81 82 83
IF                   : 39 40
INC                  : 56 58
INT                  : 10
INT_LIT              : 48
LE                   : 72
MINUS                : 62
MOD                  : 64
MODASSIGN            : 78
MULASSIGN            : 80
NE                   : 73
NEW                  : 44
OR                   : 76
PLUS                 : 61
RETURN               : 41 42
SIZE                 : 52
STRING_LIT           : 45
SUBASSIGN            : 81
TIMES                : 66
TRUE                 : 50
VOID                 : 12 15
WHILE                : 37
[                    : 6 19 24 44 54 77
]                    : 6 19 24 44 54 77
error                : 
{                    : 21
}                    : 21

Nonterminals, with rules where they appear:

arg_list             : 85 87
args                 : 53
break_stmt           : 28
compound_stmt        : 13 33
decl                 : 2 3
decl_list            : 1 3
empty                : 14 22 26 86
expr                 : 36 37 38 38 38 39 40 41 44 54 60 61 62 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 79 80 81 82 83 84 85
expr_stmt            : 34
for_stmt             : 30
fun_decl             : 4
if_stmt              : 32
local_decl           : 23
local_decls          : 21 23
param                : 17 18
param_list           : 16 18
params               : 13
program              : 0
return_stmt          : 29
stmt                 : 27 37 38 39 39 40
stmt_list            : 21 27
type_spec            : 6 7 13 19 20 24 25 44
var_decl             : 5
while_stmt           : 31


state 0

    (0) S' -> . program
    (1) program -> . decl_list
    (2) decl_list -> . decl
    (3) decl_list -> . decl_list decl
    (4) decl -> . fun_decl
    (5) decl -> . var_decl
    (13) fun_decl -> . type_spec IDENT ( params ) compound_stmt
    (6) var_decl -> . type_spec IDENT [ ] ;
    (7) var_decl -> . type_spec IDENT ;
    (8) type_spec -> . CHAR
    (9) type_spec -> . FLOAT
    (10) type_spec -> . INT
    (11) type_spec -> . BOOL
    (12) type_spec -> . VOID
    CHAR            shift and go to state 7
    FLOAT           shift and go to state 8
    INT             shift and go to state 9
    BOOL            shift and go to state 10
    VOID            shift and go to state 11

    program                        shift and go to state 1
    decl_list                      shift and go to state 2
    decl                           shift and go to state 3
    fun_decl                       shift and go to state 4
    var_decl                       shift and go to state 5
    type_spec                      shift and go to state 6

state 1

    (0) S' -> program .


state 2

    (1) program -> decl_list .
    (3) decl_list -> decl_list . decl
    (4) decl -> . fun_decl
    (5) decl -> . var_decl
    (13) fun_decl -> . type_spec IDENT ( params ) compound_stmt
    (6) var_decl -> . type_spec IDENT [ ] ;
    (7) var_decl -> . type_spec IDENT ;
    (8) type_spec -> . CHAR
    (9) type_spec -> . FLOAT
    (10) type_spec -> . INT
    (11) type_spec -> . BOOL
    (12) type_spec -> . VOID
    $end            reduce using rule 1 (program -> decl_list .)
    CHAR            shift and go to state 7
    FLOAT           shift and go to state 8
    INT             shift and go to state 9
    BOOL            shift and go to state 10
    VOID            shift and go to state 11

    decl                           shift and go to state 12
    fun_decl                       shift and go to state 4
    var_decl                       shift and go to state 5
    type_spec                      shift and go to state 6

state 3

    (2) decl_list -> decl .
    CHAR            reduce using rule 2 (decl_list -> decl .)
    FLOAT           reduce using rule 2 (decl_list -> decl .)
    INT             reduce using rule 2 (decl_list -> decl .)
    BOOL            reduce using rule 2 (decl_list -> decl .)
    VOID            reduce using rule 2 (decl_list -> decl .)
    $end            reduce using rule 2 (decl_list -> decl .)


state 4

    (4) decl -> fun_decl .
    CHAR            reduce using rule 4 (decl -> fun_decl .)
    FLOAT           reduce using rule 4 (decl -> fun_decl .)
    INT             reduce using rule 4 (decl -> fun_decl .)
    BOOL            reduce using rule 4 (decl -> fun_decl .)
    VOID            reduce using rule 4 (decl -> fun_decl .)
    $end            reduce using rule 4 (decl -> fun_decl .)


state 5

    (5) decl -> var_decl .
    CHAR            reduce using rule 5 (decl -> var_decl .)
    FLOAT           reduce using rule 5 (decl -> var_decl .)
    INT             reduce using rule 5 (decl -> var_decl .)
    BOOL            reduce using rule 5 (decl -> var_decl .)
    VOID            reduce using rule 5 (decl -> var_decl .)
    $end            reduce using rule 5 (decl -> var_decl .)


state 6

    (13) fun_decl -> type_spec . IDENT ( params ) compound_stmt
    (6) var_decl -> type_spec . IDENT [ ] ;
    (7) var_decl -> type_spec . IDENT ;
    IDENT           shift and go to state 13


state 7

    (8) type_spec -> CHAR .
    IDENT           reduce using rule 8 (type_spec -> CHAR .)
    [               reduce using rule 8 (type_spec -> CHAR .)


state 8

    (9) type_spec -> FLOAT .
    IDENT           reduce using rule 9 (type_spec -> FLOAT .)
    [               reduce using rule 9 (type_spec -> FLOAT .)


state 9

    (10) type_spec -> INT .
    IDENT           reduce using rule 10 (type_spec -> INT .)
    [               reduce using rule 10 (type_spec -> INT .)


state 10

    (11) type_spec -> BOOL .
    IDENT           reduce using rule 11 (type_spec -> BOOL .)
    [               reduce using rule 11 (type_spec -> BOOL .)


state 11

    (12) type_spec -> VOID .
    IDENT           reduce using rule 12 (type_spec -> VOID .)
    [               reduce using rule 12 (type_spec -> VOID .)


state 12

    (3) decl_list -> decl_list decl .
    CHAR            reduce using rule 3 (decl_list -> decl_list decl .)
    FLOAT           reduce using rule 3 (decl_list -> decl_list decl .)
    INT             reduce using rule 3 (decl_list -> decl_list decl .)
    BOOL            reduce using rule 3 (decl_list -> decl_list decl .)
    VOID            reduce using rule 3 (decl_list -> decl_list decl .)
    $end            reduce using rule 3 (decl_list -> decl_list decl .)


state 13

    (13) fun_decl -> type_spec IDENT . ( params ) compound_stmt
    (6) var_decl -> type_spec IDENT . [ ] ;
    (7) var_decl -> type_spec IDENT . ;
    (               shift and go to state 14
    [               shift and go to state 15
    ;               shift and go to state 16


state 14

    (13) fun_decl -> type_spec IDENT ( . params ) compound_stmt
    (14) params -> . empty
    (15) params -> . VOID
    (16) params -> . param_list
    (88) empty -> .
    (17) param_list -> . param
    (18) param_list -> . param_list , param
    (19) param -> . type_spec IDENT [ ]
    (20) param -> . type_spec IDENT
    (8) type_spec -> . CHAR
    (9) type_spec -> . FLOAT
    (10) type_spec -> . INT
    (11) type_spec -> . BOOL
    (12) type_spec -> . VOID
    VOID            shift and go to state 20
    )               reduce using rule 88 (empty -> .)
    CHAR            shift and go to state 7
    FLOAT           shift and go to state 8
    INT             shift and go to state 9
    BOOL            shift and go to state 10

    type_spec                      shift and go to state 17
    params                         shift and go to state 18
    empty                          shift and go to state 19
    param_list                     shift and go to state 21
    param                          shift and go to state 22

state 15

    (6) var_decl -> type_spec IDENT [ . ] ;
    ]               shift and go to state 23


state 16

    (7) var_decl -> type_spec IDENT ; .
    CHAR            reduce using rule 7 (var_decl -> type_spec IDENT ; .)
    FLOAT           reduce using rule 7 (var_decl -> type_spec IDENT ; .)
    INT             reduce using rule 7 (var_decl -> type_spec IDENT ; .)
    BOOL            reduce using rule 7 (var_decl -> type_spec IDENT ; .)
    VOID            reduce using rule 7 (var_decl -> type_spec IDENT ; .)
    $end            reduce using rule 7 (var_decl -> type_spec IDENT ; .)


state 17

    (19) param -> type_spec . IDENT [ ]
    (20) param -> type_spec . IDENT
    IDENT           shift and go to state 24


state 18

    (13) fun_decl -> type_spec IDENT ( params . ) compound_stmt
    )               shift and go to state 25


state 19

    (14) params -> empty .
    )               reduce using rule 14 (params -> empty .)


state 20

    (15) params -> VOID .
    (12) type_spec -> VOID .
    )               reduce using rule 15 (params -> VOID .)
    IDENT           reduce using rule 12 (type_spec -> VOID .)


state 21

    (16) params -> param_list .
    (18) param_list -> param_list . , param
    )               reduce using rule 16 (params -> param_list .)
    ,               shift and go to state 26


state 22

    (17) param_list -> param .
    ,               reduce using rule 17 (param_list -> param .)
    )               reduce using rule 17 (param_list -> param .)


state 23

    (6) var_decl -> type_spec IDENT [ ] . ;
    ;               shift and go to state 27


state 24

    (19) param -> type_spec IDENT . [ ]
    (20) param -> type_spec IDENT .
    [               shift and go to state 28
    ,               reduce using rule 20 (param -> type_spec IDENT .)
    )               reduce using rule 20 (param -> type_spec IDENT .)


state 25

    (13) fun_decl -> type_spec IDENT ( params ) . compound_stmt
    (21) compound_stmt -> . { local_decls stmt_list }
    {               shift and go to state 30

    compound_stmt                  shift and go to state 29

state 26

    (18) param_list -> param_list , . param
    (19) param -> . type_spec IDENT [ ]
    (20) param -> . type_spec IDENT
    (8) type_spec -> . CHAR
    (9) type_spec -> . FLOAT
    (10) type_spec -> . INT
    (11) type_spec -> . BOOL
    (12) type_spec -> . VOID
    CHAR            shift and go to state 7
    FLOAT           shift and go to state 8
    INT             shift and go to state 9
    BOOL            shift and go to state 10
    VOID            shift and go to state 11

    param                          shift and go to state 31
    type_spec                      shift and go to state 17

state 27

    (6) var_decl -> type_spec IDENT [ ] ; .
    CHAR            reduce using rule 6 (var_decl -> type_spec IDENT [ ] ; .)
    FLOAT           reduce using rule 6 (var_decl -> type_spec IDENT [ ] ; .)
    INT             reduce using rule 6 (var_decl -> type_spec IDENT [ ] ; .)
    BOOL            reduce using rule 6 (var_decl -> type_spec IDENT [ ] ; .)
    VOID            reduce using rule 6 (var_decl -> type_spec IDENT [ ] ; .)
    $end            reduce using rule 6 (var_decl -> type_spec IDENT [ ] ; .)


state 28

    (19) param -> type_spec IDENT [ . ]
    ]               shift and go to state 32


state 29

    (13) fun_decl -> type_spec IDENT ( params ) compound_stmt .
    CHAR            reduce using rule 13 (fun_decl -> type_spec IDENT ( params ) compound_stmt .)
    FLOAT           reduce using rule 13 (fun_decl -> type_spec IDENT ( params ) compound_stmt .)
    INT             reduce using rule 13 (fun_decl -> type_spec IDENT ( params ) compound_stmt .)
    BOOL            reduce using rule 13 (fun_decl -> type_spec IDENT ( params ) compound_stmt .)
    VOID            reduce using rule 13 (fun_decl -> type_spec IDENT ( params ) compound_stmt .)
    $end            reduce using rule 13 (fun_decl -> type_spec IDENT ( params ) compound_stmt .)


state 30

    (21) compound_stmt -> { . local_decls stmt_list }
    (22) local_decls -> . empty
    (23) local_decls -> . local_decls local_decl
    (88) empty -> .
    CHAR            reduce using rule 88 (empty -> .)
    FLOAT           reduce using rule 88 (empty -> .)
    INT             reduce using rule 88 (empty -> .)
    BOOL            reduce using rule 88 (empty -> .)
    VOID            reduce using rule 88 (empty -> .)
    }               reduce using rule 88 (empty -> .)
    BREAK           reduce using rule 88 (empty -> .)
    RETURN          reduce using rule 88 (empty -> .)
    FOR             reduce using rule 88 (empty -> .)
    WHILE           reduce using rule 88 (empty -> .)
    IF              reduce using rule 88 (empty -> .)
    {               reduce using rule 88 (empty -> .)
    ;               reduce using rule 88 (empty -> .)
    NEW             reduce using rule 88 (empty -> .)
    STRING_LIT      reduce using rule 88 (empty -> .)
    CHAR_LIT        reduce using rule 88 (empty -> .)
    FLOAT_LIT       reduce using rule 88 (empty -> .)
    INT_LIT         reduce using rule 88 (empty -> .)
    FALSE           reduce using rule 88 (empty -> .)
    TRUE            reduce using rule 88 (empty -> .)
    BOOL_LIT        reduce using rule 88 (empty -> .)
    IDENT           reduce using rule 88 (empty -> .)
    DEC             reduce using rule 88 (empty -> .)
    INC             reduce using rule 88 (empty -> .)
    (               reduce using rule 88 (empty -> .)
    PLUS            reduce using rule 88 (empty -> .)
    MINUS           reduce using rule 88 (empty -> .)
    !               reduce using rule 88 (empty -> .)

    local_decls                    shift and go to state 33
    empty                          shift and go to state 34

state 31

    (18) param_list -> param_list , param .
    ,               reduce using rule 18 (param_list -> param_list , param .)
    )               reduce using rule 18 (param_list -> param_list , param .)


state 32

    (19) param -> type_spec IDENT [ ] .
    ,               reduce using rule 19 (param -> type_spec IDENT [ ] .)
    )               reduce using rule 19 (param -> type_spec IDENT [ ] .)


state 33

    (21) compound_stmt -> { local_decls . stmt_list }
    (23) local_decls -> local_decls . local_decl
    (26) stmt_list -> . empty
    (27) stmt_list -> . stmt_list stmt
    (24) local_decl -> . type_spec IDENT [ ] ;
    (25) local_decl -> . type_spec IDENT ;
    (88) empty -> .
    (8) type_spec -> . CHAR
    (9) type_spec -> . FLOAT
    (10) type_spec -> . INT
    (11) type_spec -> . BOOL
    (12) type_spec -> . VOID
    }               reduce using rule 88 (empty -> .)
    BREAK           reduce using rule 88 (empty -> .)
    RETURN          reduce using rule 88 (empty -> .)
    FOR             reduce using rule 88 (empty -> .)
    WHILE           reduce using rule 88 (empty -> .)
    IF              reduce using rule 88 (empty -> .)
    {               reduce using rule 88 (empty -> .)
    ;               reduce using rule 88 (empty -> .)
    NEW             reduce using rule 88 (empty -> .)
    STRING_LIT      reduce using rule 88 (empty -> .)
    CHAR_LIT        reduce using rule 88 (empty -> .)
    FLOAT_LIT       reduce using rule 88 (empty -> .)
    INT_LIT         reduce using rule 88 (empty -> .)
    FALSE           reduce using rule 88 (empty -> .)
    TRUE            reduce using rule 88 (empty -> .)
    BOOL_LIT        reduce using rule 88 (empty -> .)
    IDENT           reduce using rule 88 (empty -> .)
    DEC             reduce using rule 88 (empty -> .)
    INC             reduce using rule 88 (empty -> .)
    (               reduce using rule 88 (empty -> .)
    PLUS            reduce using rule 88 (empty -> .)
    MINUS           reduce using rule 88 (empty -> .)
    !               reduce using rule 88 (empty -> .)
    CHAR            shift and go to state 7
    FLOAT           shift and go to state 8
    INT             shift and go to state 9
    BOOL            shift and go to state 10
    VOID            shift and go to state 11

    stmt_list                      shift and go to state 35
    local_decl                     shift and go to state 36
    empty                          shift and go to state 37
    type_spec                      shift and go to state 38

state 34

    (22) local_decls -> empty .
    CHAR            reduce using rule 22 (local_decls -> empty .)
    FLOAT           reduce using rule 22 (local_decls -> empty .)
    INT             reduce using rule 22 (local_decls -> empty .)
    BOOL            reduce using rule 22 (local_decls -> empty .)
    VOID            reduce using rule 22 (local_decls -> empty .)
    }               reduce using rule 22 (local_decls -> empty .)
    BREAK           reduce using rule 22 (local_decls -> empty .)
    RETURN          reduce using rule 22 (local_decls -> empty .)
    FOR             reduce using rule 22 (local_decls -> empty .)
    WHILE           reduce using rule 22 (local_decls -> empty .)
    IF              reduce using rule 22 (local_decls -> empty .)
    {               reduce using rule 22 (local_decls -> empty .)
    ;               reduce using rule 22 (local_decls -> empty .)
    NEW             reduce using rule 22 (local_decls -> empty .)
    STRING_LIT      reduce using rule 22 (local_decls -> empty .)
    CHAR_LIT        reduce using rule 22 (local_decls -> empty .)
    FLOAT_LIT       reduce using rule 22 (local_decls -> empty .)
    INT_LIT         reduce using rule 22 (local_decls -> empty .)
    FALSE           reduce using rule 22 (local_decls -> empty .)
    TRUE            reduce using rule 22 (local_decls -> empty .)
    BOOL_LIT        reduce using rule 22 (local_decls -> empty .)
    IDENT           reduce using rule 22 (local_decls -> empty .)
    DEC             reduce using rule 22 (local_decls -> empty .)
    INC             reduce using rule 22 (local_decls -> empty .)
    (               reduce using rule 22 (local_decls -> empty .)
    PLUS            reduce using rule 22 (local_decls -> empty .)
    MINUS           reduce using rule 22 (local_decls -> empty .)
    !               reduce using rule 22 (local_decls -> empty .)


state 35

    (21) compound_stmt -> { local_decls stmt_list . }
    (27) stmt_list -> stmt_list . stmt
    (28) stmt -> . break_stmt
    (29) stmt -> . return_stmt
    (30) stmt -> . for_stmt
    (31) stmt -> . while_stmt
    (32) stmt -> . if_stmt
    (33) stmt -> . compound_stmt
    (34) stmt -> . expr_stmt
    (43) break_stmt -> . BREAK ;
    (41) return_stmt -> . RETURN expr ;
    (42) return_stmt -> . RETURN ;
    (38) for_stmt -> . FOR ( expr ; expr ; expr ) stmt
    (37) while_stmt -> . WHILE ( expr ) stmt
    (39) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (40) if_stmt -> . IF ( expr ) stmt
    (21) compound_stmt -> . { local_decls stmt_list }
    (35) expr_stmt -> . ;
    (36) expr_stmt -> . expr ;
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    }               shift and go to state 39
    BREAK           shift and go to state 48
    RETURN          shift and go to state 50
    FOR             shift and go to state 52
    WHILE           shift and go to state 54
    IF              shift and go to state 55
    {               shift and go to state 30
    ;               shift and go to state 49
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    stmt                           shift and go to state 40
    break_stmt                     shift and go to state 41
    return_stmt                    shift and go to state 42
    for_stmt                       shift and go to state 43
    while_stmt                     shift and go to state 44
    if_stmt                        shift and go to state 45
    compound_stmt                  shift and go to state 46
    expr_stmt                      shift and go to state 47
    expr                           shift and go to state 51

state 36

    (23) local_decls -> local_decls local_decl .
    CHAR            reduce using rule 23 (local_decls -> local_decls local_decl .)
    FLOAT           reduce using rule 23 (local_decls -> local_decls local_decl .)
    INT             reduce using rule 23 (local_decls -> local_decls local_decl .)
    BOOL            reduce using rule 23 (local_decls -> local_decls local_decl .)
    VOID            reduce using rule 23 (local_decls -> local_decls local_decl .)
    }               reduce using rule 23 (local_decls -> local_decls local_decl .)
    BREAK           reduce using rule 23 (local_decls -> local_decls local_decl .)
    RETURN          reduce using rule 23 (local_decls -> local_decls local_decl .)
    FOR             reduce using rule 23 (local_decls -> local_decls local_decl .)
    WHILE           reduce using rule 23 (local_decls -> local_decls local_decl .)
    IF              reduce using rule 23 (local_decls -> local_decls local_decl .)
    {               reduce using rule 23 (local_decls -> local_decls local_decl .)
    ;               reduce using rule 23 (local_decls -> local_decls local_decl .)
    NEW             reduce using rule 23 (local_decls -> local_decls local_decl .)
    STRING_LIT      reduce using rule 23 (local_decls -> local_decls local_decl .)
    CHAR_LIT        reduce using rule 23 (local_decls -> local_decls local_decl .)
    FLOAT_LIT       reduce using rule 23 (local_decls -> local_decls local_decl .)
    INT_LIT         reduce using rule 23 (local_decls -> local_decls local_decl .)
    FALSE           reduce using rule 23 (local_decls -> local_decls local_decl .)
    TRUE            reduce using rule 23 (local_decls -> local_decls local_decl .)
    BOOL_LIT        reduce using rule 23 (local_decls -> local_decls local_decl .)
    IDENT           reduce using rule 23 (local_decls -> local_decls local_decl .)
    DEC             reduce using rule 23 (local_decls -> local_decls local_decl .)
    INC             reduce using rule 23 (local_decls -> local_decls local_decl .)
    (               reduce using rule 23 (local_decls -> local_decls local_decl .)
    PLUS            reduce using rule 23 (local_decls -> local_decls local_decl .)
    MINUS           reduce using rule 23 (local_decls -> local_decls local_decl .)
    !               reduce using rule 23 (local_decls -> local_decls local_decl .)


state 37

    (26) stmt_list -> empty .
    }               reduce using rule 26 (stmt_list -> empty .)
    BREAK           reduce using rule 26 (stmt_list -> empty .)
    RETURN          reduce using rule 26 (stmt_list -> empty .)
    FOR             reduce using rule 26 (stmt_list -> empty .)
    WHILE           reduce using rule 26 (stmt_list -> empty .)
    IF              reduce using rule 26 (stmt_list -> empty .)
    {               reduce using rule 26 (stmt_list -> empty .)
    ;               reduce using rule 26 (stmt_list -> empty .)
    NEW             reduce using rule 26 (stmt_list -> empty .)
    STRING_LIT      reduce using rule 26 (stmt_list -> empty .)
    CHAR_LIT        reduce using rule 26 (stmt_list -> empty .)
    FLOAT_LIT       reduce using rule 26 (stmt_list -> empty .)
    INT_LIT         reduce using rule 26 (stmt_list -> empty .)
    FALSE           reduce using rule 26 (stmt_list -> empty .)
    TRUE            reduce using rule 26 (stmt_list -> empty .)
    BOOL_LIT        reduce using rule 26 (stmt_list -> empty .)
    IDENT           reduce using rule 26 (stmt_list -> empty .)
    DEC             reduce using rule 26 (stmt_list -> empty .)
    INC             reduce using rule 26 (stmt_list -> empty .)
    (               reduce using rule 26 (stmt_list -> empty .)
    PLUS            reduce using rule 26 (stmt_list -> empty .)
    MINUS           reduce using rule 26 (stmt_list -> empty .)
    !               reduce using rule 26 (stmt_list -> empty .)


state 38

    (24) local_decl -> type_spec . IDENT [ ] ;
    (25) local_decl -> type_spec . IDENT ;
    IDENT           shift and go to state 70


state 39

    (21) compound_stmt -> { local_decls stmt_list } .
    CHAR            reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    FLOAT           reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    INT             reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    BOOL            reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    VOID            reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    $end            reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    }               reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    BREAK           reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    RETURN          reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    FOR             reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    WHILE           reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    IF              reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    {               reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    ;               reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    NEW             reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    STRING_LIT      reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    CHAR_LIT        reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    FLOAT_LIT       reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    INT_LIT         reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    FALSE           reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    TRUE            reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    BOOL_LIT        reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    IDENT           reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    DEC             reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    INC             reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    (               reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    PLUS            reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    MINUS           reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    !               reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)
    ELSE            reduce using rule 21 (compound_stmt -> { local_decls stmt_list } .)


state 40

    (27) stmt_list -> stmt_list stmt .
    }               reduce using rule 27 (stmt_list -> stmt_list stmt .)
    BREAK           reduce using rule 27 (stmt_list -> stmt_list stmt .)
    RETURN          reduce using rule 27 (stmt_list -> stmt_list stmt .)
    FOR             reduce using rule 27 (stmt_list -> stmt_list stmt .)
    WHILE           reduce using rule 27 (stmt_list -> stmt_list stmt .)
    IF              reduce using rule 27 (stmt_list -> stmt_list stmt .)
    {               reduce using rule 27 (stmt_list -> stmt_list stmt .)
    ;               reduce using rule 27 (stmt_list -> stmt_list stmt .)
    NEW             reduce using rule 27 (stmt_list -> stmt_list stmt .)
    STRING_LIT      reduce using rule 27 (stmt_list -> stmt_list stmt .)
    CHAR_LIT        reduce using rule 27 (stmt_list -> stmt_list stmt .)
    FLOAT_LIT       reduce using rule 27 (stmt_list -> stmt_list stmt .)
    INT_LIT         reduce using rule 27 (stmt_list -> stmt_list stmt .)
    FALSE           reduce using rule 27 (stmt_list -> stmt_list stmt .)
    TRUE            reduce using rule 27 (stmt_list -> stmt_list stmt .)
    BOOL_LIT        reduce using rule 27 (stmt_list -> stmt_list stmt .)
    IDENT           reduce using rule 27 (stmt_list -> stmt_list stmt .)
    DEC             reduce using rule 27 (stmt_list -> stmt_list stmt .)
    INC             reduce using rule 27 (stmt_list -> stmt_list stmt .)
    (               reduce using rule 27 (stmt_list -> stmt_list stmt .)
    PLUS            reduce using rule 27 (stmt_list -> stmt_list stmt .)
    MINUS           reduce using rule 27 (stmt_list -> stmt_list stmt .)
    !               reduce using rule 27 (stmt_list -> stmt_list stmt .)


state 41

    (28) stmt -> break_stmt .
    }               reduce using rule 28 (stmt -> break_stmt .)
    BREAK           reduce using rule 28 (stmt -> break_stmt .)
    RETURN          reduce using rule 28 (stmt -> break_stmt .)
    FOR             reduce using rule 28 (stmt -> break_stmt .)
    WHILE           reduce using rule 28 (stmt -> break_stmt .)
    IF              reduce using rule 28 (stmt -> break_stmt .)
    {               reduce using rule 28 (stmt -> break_stmt .)
    ;               reduce using rule 28 (stmt -> break_stmt .)
    NEW             reduce using rule 28 (stmt -> break_stmt .)
    STRING_LIT      reduce using rule 28 (stmt -> break_stmt .)
    CHAR_LIT        reduce using rule 28 (stmt -> break_stmt .)
    FLOAT_LIT       reduce using rule 28 (stmt -> break_stmt .)
    INT_LIT         reduce using rule 28 (stmt -> break_stmt .)
    FALSE           reduce using rule 28 (stmt -> break_stmt .)
    TRUE            reduce using rule 28 (stmt -> break_stmt .)
    BOOL_LIT        reduce using rule 28 (stmt -> break_stmt .)
    IDENT           reduce using rule 28 (stmt -> break_stmt .)
    DEC             reduce using rule 28 (stmt -> break_stmt .)
    INC             reduce using rule 28 (stmt -> break_stmt .)
    (               reduce using rule 28 (stmt -> break_stmt .)
    PLUS            reduce using rule 28 (stmt -> break_stmt .)
    MINUS           reduce using rule 28 (stmt -> break_stmt .)
    !               reduce using rule 28 (stmt -> break_stmt .)
    ELSE            reduce using rule 28 (stmt -> break_stmt .)


state 42

    (29) stmt -> return_stmt .
    }               reduce using rule 29 (stmt -> return_stmt .)
    BREAK           reduce using rule 29 (stmt -> return_stmt .)
    RETURN          reduce using rule 29 (stmt -> return_stmt .)
    FOR             reduce using rule 29 (stmt -> return_stmt .)
    WHILE           reduce using rule 29 (stmt -> return_stmt .)
    IF              reduce using rule 29 (stmt -> return_stmt .)
    {               reduce using rule 29 (stmt -> return_stmt .)
    ;               reduce using rule 29 (stmt -> return_stmt .)
    NEW             reduce using rule 29 (stmt -> return_stmt .)
    STRING_LIT      reduce using rule 29 (stmt -> return_stmt .)
    CHAR_LIT        reduce using rule 29 (stmt -> return_stmt .)
    FLOAT_LIT       reduce using rule 29 (stmt -> return_stmt .)
    INT_LIT         reduce using rule 29 (stmt -> return_stmt .)
    FALSE           reduce using rule 29 (stmt -> return_stmt .)
    TRUE            reduce using rule 29 (stmt -> return_stmt .)
    BOOL_LIT        reduce using rule 29 (stmt -> return_stmt .)
    IDENT           reduce using rule 29 (stmt -> return_stmt .)
    DEC             reduce using rule 29 (stmt -> return_stmt .)
    INC             reduce using rule 29 (stmt -> return_stmt .)
    (               reduce using rule 29 (stmt -> return_stmt .)
    PLUS            reduce using rule 29 (stmt -> return_stmt .)
    MINUS           reduce using rule 29 (stmt -> return_stmt .)
    !               reduce using rule 29 (stmt -> return_stmt .)
    ELSE            reduce using rule 29 (stmt -> return_stmt .)


state 43

    (30) stmt -> for_stmt .
    }               reduce using rule 30 (stmt -> for_stmt .)
    BREAK           reduce using rule 30 (stmt -> for_stmt .)
    RETURN          reduce using rule 30 (stmt -> for_stmt .)
    FOR             reduce using rule 30 (stmt -> for_stmt .)
    WHILE           reduce using rule 30 (stmt -> for_stmt .)
    IF              reduce using rule 30 (stmt -> for_stmt .)
    {               reduce using rule 30 (stmt -> for_stmt .)
    ;               reduce using rule 30 (stmt -> for_stmt .)
    NEW             reduce using rule 30 (stmt -> for_stmt .)
    STRING_LIT      reduce using rule 30 (stmt -> for_stmt .)
    CHAR_LIT        reduce using rule 30 (stmt -> for_stmt .)
    FLOAT_LIT       reduce using rule 30 (stmt -> for_stmt .)
    INT_LIT         reduce using rule 30 (stmt -> for_stmt .)
    FALSE           reduce using rule 30 (stmt -> for_stmt .)
    TRUE            reduce using rule 30 (stmt -> for_stmt .)
    BOOL_LIT        reduce using rule 30 (stmt -> for_stmt .)
    IDENT           reduce using rule 30 (stmt -> for_stmt .)
    DEC             reduce using rule 30 (stmt -> for_stmt .)
    INC             reduce using rule 30 (stmt -> for_stmt .)
    (               reduce using rule 30 (stmt -> for_stmt .)
    PLUS            reduce using rule 30 (stmt -> for_stmt .)
    MINUS           reduce using rule 30 (stmt -> for_stmt .)
    !               reduce using rule 30 (stmt -> for_stmt .)
    ELSE            reduce using rule 30 (stmt -> for_stmt .)


state 44

    (31) stmt -> while_stmt .
    }               reduce using rule 31 (stmt -> while_stmt .)
    BREAK           reduce using rule 31 (stmt -> while_stmt .)
    RETURN          reduce using rule 31 (stmt -> while_stmt .)
    FOR             reduce using rule 31 (stmt -> while_stmt .)
    WHILE           reduce using rule 31 (stmt -> while_stmt .)
    IF              reduce using rule 31 (stmt -> while_stmt .)
    {               reduce using rule 31 (stmt -> while_stmt .)
    ;               reduce using rule 31 (stmt -> while_stmt .)
    NEW             reduce using rule 31 (stmt -> while_stmt .)
    STRING_LIT      reduce using rule 31 (stmt -> while_stmt .)
    CHAR_LIT        reduce using rule 31 (stmt -> while_stmt .)
    FLOAT_LIT       reduce using rule 31 (stmt -> while_stmt .)
    INT_LIT         reduce using rule 31 (stmt -> while_stmt .)
    FALSE           reduce using rule 31 (stmt -> while_stmt .)
    TRUE            reduce using rule 31 (stmt -> while_stmt .)
    BOOL_LIT        reduce using rule 31 (stmt -> while_stmt .)
    IDENT           reduce using rule 31 (stmt -> while_stmt .)
    DEC             reduce using rule 31 (stmt -> while_stmt .)
    INC             reduce using rule 31 (stmt -> while_stmt .)
    (               reduce using rule 31 (stmt -> while_stmt .)
    PLUS            reduce using rule 31 (stmt -> while_stmt .)
    MINUS           reduce using rule 31 (stmt -> while_stmt .)
    !               reduce using rule 31 (stmt -> while_stmt .)
    ELSE            reduce using rule 31 (stmt -> while_stmt .)


state 45

    (32) stmt -> if_stmt .
    }               reduce using rule 32 (stmt -> if_stmt .)
    BREAK           reduce using rule 32 (stmt -> if_stmt .)
    RETURN          reduce using rule 32 (stmt -> if_stmt .)
    FOR             reduce using rule 32 (stmt -> if_stmt .)
    WHILE           reduce using rule 32 (stmt -> if_stmt .)
    IF              reduce using rule 32 (stmt -> if_stmt .)
    {               reduce using rule 32 (stmt -> if_stmt .)
    ;               reduce using rule 32 (stmt -> if_stmt .)
    NEW             reduce using rule 32 (stmt -> if_stmt .)
    STRING_LIT      reduce using rule 32 (stmt -> if_stmt .)
    CHAR_LIT        reduce using rule 32 (stmt -> if_stmt .)
    FLOAT_LIT       reduce using rule 32 (stmt -> if_stmt .)
    INT_LIT         reduce using rule 32 (stmt -> if_stmt .)
    FALSE           reduce using rule 32 (stmt -> if_stmt .)
    TRUE            reduce using rule 32 (stmt -> if_stmt .)
    BOOL_LIT        reduce using rule 32 (stmt -> if_stmt .)
    IDENT           reduce using rule 32 (stmt -> if_stmt .)
    DEC             reduce using rule 32 (stmt -> if_stmt .)
    INC             reduce using rule 32 (stmt -> if_stmt .)
    (               reduce using rule 32 (stmt -> if_stmt .)
    PLUS            reduce using rule 32 (stmt -> if_stmt .)
    MINUS           reduce using rule 32 (stmt -> if_stmt .)
    !               reduce using rule 32 (stmt -> if_stmt .)
    ELSE            reduce using rule 32 (stmt -> if_stmt .)


state 46

    (33) stmt -> compound_stmt .
    }               reduce using rule 33 (stmt -> compound_stmt .)
    BREAK           reduce using rule 33 (stmt -> compound_stmt .)
    RETURN          reduce using rule 33 (stmt -> compound_stmt .)
    FOR             reduce using rule 33 (stmt -> compound_stmt .)
    WHILE           reduce using rule 33 (stmt -> compound_stmt .)
    IF              reduce using rule 33 (stmt -> compound_stmt .)
    {               reduce using rule 33 (stmt -> compound_stmt .)
    ;               reduce using rule 33 (stmt -> compound_stmt .)
    NEW             reduce using rule 33 (stmt -> compound_stmt .)
    STRING_LIT      reduce using rule 33 (stmt -> compound_stmt .)
    CHAR_LIT        reduce using rule 33 (stmt -> compound_stmt .)
    FLOAT_LIT       reduce using rule 33 (stmt -> compound_stmt .)
    INT_LIT         reduce using rule 33 (stmt -> compound_stmt .)
    FALSE           reduce using rule 33 (stmt -> compound_stmt .)
    TRUE            reduce using rule 33 (stmt -> compound_stmt .)
    BOOL_LIT        reduce using rule 33 (stmt -> compound_stmt .)
    IDENT           reduce using rule 33 (stmt -> compound_stmt .)
    DEC             reduce using rule 33 (stmt -> compound_stmt .)
    INC             reduce using rule 33 (stmt -> compound_stmt .)
    (               reduce using rule 33 (stmt -> compound_stmt .)
    PLUS            reduce using rule 33 (stmt -> compound_stmt .)
    MINUS           reduce using rule 33 (stmt -> compound_stmt .)
    !               reduce using rule 33 (stmt -> compound_stmt .)
    ELSE            reduce using rule 33 (stmt -> compound_stmt .)


state 47

    (34) stmt -> expr_stmt .
    }               reduce using rule 34 (stmt -> expr_stmt .)
    BREAK           reduce using rule 34 (stmt -> expr_stmt .)
    RETURN          reduce using rule 34 (stmt -> expr_stmt .)
    FOR             reduce using rule 34 (stmt -> expr_stmt .)
    WHILE           reduce using rule 34 (stmt -> expr_stmt .)
    IF              reduce using rule 34 (stmt -> expr_stmt .)
    {               reduce using rule 34 (stmt -> expr_stmt .)
    ;               reduce using rule 34 (stmt -> expr_stmt .)
    NEW             reduce using rule 34 (stmt -> expr_stmt .)
    STRING_LIT      reduce using rule 34 (stmt -> expr_stmt .)
    CHAR_LIT        reduce using rule 34 (stmt -> expr_stmt .)
    FLOAT_LIT       reduce using rule 34 (stmt -> expr_stmt .)
    INT_LIT         reduce using rule 34 (stmt -> expr_stmt .)
    FALSE           reduce using rule 34 (stmt -> expr_stmt .)
    TRUE            reduce using rule 34 (stmt -> expr_stmt .)
    BOOL_LIT        reduce using rule 34 (stmt -> expr_stmt .)
    IDENT           reduce using rule 34 (stmt -> expr_stmt .)
    DEC             reduce using rule 34 (stmt -> expr_stmt .)
    INC             reduce using rule 34 (stmt -> expr_stmt .)
    (               reduce using rule 34 (stmt -> expr_stmt .)
    PLUS            reduce using rule 34 (stmt -> expr_stmt .)
    MINUS           reduce using rule 34 (stmt -> expr_stmt .)
    !               reduce using rule 34 (stmt -> expr_stmt .)
    ELSE            reduce using rule 34 (stmt -> expr_stmt .)


state 48

    (43) break_stmt -> BREAK . ;
    ;               shift and go to state 71


state 49

    (35) expr_stmt -> ; .
    }               reduce using rule 35 (expr_stmt -> ; .)
    BREAK           reduce using rule 35 (expr_stmt -> ; .)
    RETURN          reduce using rule 35 (expr_stmt -> ; .)
    FOR             reduce using rule 35 (expr_stmt -> ; .)
    WHILE           reduce using rule 35 (expr_stmt -> ; .)
    IF              reduce using rule 35 (expr_stmt -> ; .)
    {               reduce using rule 35 (expr_stmt -> ; .)
    ;               reduce using rule 35 (expr_stmt -> ; .)
    NEW             reduce using rule 35 (expr_stmt -> ; .)
    STRING_LIT      reduce using rule 35 (expr_stmt -> ; .)
    CHAR_LIT        reduce using rule 35 (expr_stmt -> ; .)
    FLOAT_LIT       reduce using rule 35 (expr_stmt -> ; .)
    INT_LIT         reduce using rule 35 (expr_stmt -> ; .)
    FALSE           reduce using rule 35 (expr_stmt -> ; .)
    TRUE            reduce using rule 35 (expr_stmt -> ; .)
    BOOL_LIT        reduce using rule 35 (expr_stmt -> ; .)
    IDENT           reduce using rule 35 (expr_stmt -> ; .)
    DEC             reduce using rule 35 (expr_stmt -> ; .)
    INC             reduce using rule 35 (expr_stmt -> ; .)
    (               reduce using rule 35 (expr_stmt -> ; .)
    PLUS            reduce using rule 35 (expr_stmt -> ; .)
    MINUS           reduce using rule 35 (expr_stmt -> ; .)
    !               reduce using rule 35 (expr_stmt -> ; .)
    ELSE            reduce using rule 35 (expr_stmt -> ; .)


state 50

    (41) return_stmt -> RETURN . expr ;
    (42) return_stmt -> RETURN . ;
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    ;               shift and go to state 73
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 72

state 51

    (36) expr_stmt -> expr . ;
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               shift and go to state 74
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 52

    (38) for_stmt -> FOR . ( expr ; expr ; expr ) stmt
    (               shift and go to state 88


state 53

    (60) expr -> ( . expr )
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 89

state 54

    (37) while_stmt -> WHILE . ( expr ) stmt
    (               shift and go to state 90


state 55

    (39) if_stmt -> IF . ( expr ) stmt ELSE stmt
    (40) if_stmt -> IF . ( expr ) stmt
    (               shift and go to state 91


state 56

    (44) expr -> NEW . type_spec [ expr ]
    (8) type_spec -> . CHAR
    (9) type_spec -> . FLOAT
    (10) type_spec -> . INT
    (11) type_spec -> . BOOL
    (12) type_spec -> . VOID
    CHAR            shift and go to state 7
    FLOAT           shift and go to state 8
    INT             shift and go to state 9
    BOOL            shift and go to state 10
    VOID            shift and go to state 11

    type_spec                      shift and go to state 92

state 57

    (45) expr -> STRING_LIT .
    ;               reduce using rule 45 (expr -> STRING_LIT .)
    MOD             reduce using rule 45 (expr -> STRING_LIT .)
    DIVIDE          reduce using rule 45 (expr -> STRING_LIT .)
    TIMES           reduce using rule 45 (expr -> STRING_LIT .)
    -               reduce using rule 45 (expr -> STRING_LIT .)
    +               reduce using rule 45 (expr -> STRING_LIT .)
    >               reduce using rule 45 (expr -> STRING_LIT .)
    GE              reduce using rule 45 (expr -> STRING_LIT .)
    <               reduce using rule 45 (expr -> STRING_LIT .)
    LE              reduce using rule 45 (expr -> STRING_LIT .)
    NE              reduce using rule 45 (expr -> STRING_LIT .)
    EQ              reduce using rule 45 (expr -> STRING_LIT .)
    AND             reduce using rule 45 (expr -> STRING_LIT .)
    OR              reduce using rule 45 (expr -> STRING_LIT .)
    )               reduce using rule 45 (expr -> STRING_LIT .)
    ,               reduce using rule 45 (expr -> STRING_LIT .)
    ]               reduce using rule 45 (expr -> STRING_LIT .)


state 58

    (46) expr -> CHAR_LIT .
    ;               reduce using rule 46 (expr -> CHAR_LIT .)
    MOD             reduce using rule 46 (expr -> CHAR_LIT .)
    DIVIDE          reduce using rule 46 (expr -> CHAR_LIT .)
    TIMES           reduce using rule 46 (expr -> CHAR_LIT .)
    -               reduce using rule 46 (expr -> CHAR_LIT .)
    +               reduce using rule 46 (expr -> CHAR_LIT .)
    >               reduce using rule 46 (expr -> CHAR_LIT .)
    GE              reduce using rule 46 (expr -> CHAR_LIT .)
    <               reduce using rule 46 (expr -> CHAR_LIT .)
    LE              reduce using rule 46 (expr -> CHAR_LIT .)
    NE              reduce using rule 46 (expr -> CHAR_LIT .)
    EQ              reduce using rule 46 (expr -> CHAR_LIT .)
    AND             reduce using rule 46 (expr -> CHAR_LIT .)
    OR              reduce using rule 46 (expr -> CHAR_LIT .)
    )               reduce using rule 46 (expr -> CHAR_LIT .)
    ,               reduce using rule 46 (expr -> CHAR_LIT .)
    ]               reduce using rule 46 (expr -> CHAR_LIT .)


state 59

    (47) expr -> FLOAT_LIT .
    ;               reduce using rule 47 (expr -> FLOAT_LIT .)
    MOD             reduce using rule 47 (expr -> FLOAT_LIT .)
    DIVIDE          reduce using rule 47 (expr -> FLOAT_LIT .)
    TIMES           reduce using rule 47 (expr -> FLOAT_LIT .)
    -               reduce using rule 47 (expr -> FLOAT_LIT .)
    +               reduce using rule 47 (expr -> FLOAT_LIT .)
    >               reduce using rule 47 (expr -> FLOAT_LIT .)
    GE              reduce using rule 47 (expr -> FLOAT_LIT .)
    <               reduce using rule 47 (expr -> FLOAT_LIT .)
    LE              reduce using rule 47 (expr -> FLOAT_LIT .)
    NE              reduce using rule 47 (expr -> FLOAT_LIT .)
    EQ              reduce using rule 47 (expr -> FLOAT_LIT .)
    AND             reduce using rule 47 (expr -> FLOAT_LIT .)
    OR              reduce using rule 47 (expr -> FLOAT_LIT .)
    )               reduce using rule 47 (expr -> FLOAT_LIT .)
    ,               reduce using rule 47 (expr -> FLOAT_LIT .)
    ]               reduce using rule 47 (expr -> FLOAT_LIT .)


state 60

    (48) expr -> INT_LIT .
    ;               reduce using rule 48 (expr -> INT_LIT .)
    MOD             reduce using rule 48 (expr -> INT_LIT .)
    DIVIDE          reduce using rule 48 (expr -> INT_LIT .)
    TIMES           reduce using rule 48 (expr -> INT_LIT .)
    -               reduce using rule 48 (expr -> INT_LIT .)
    +               reduce using rule 48 (expr -> INT_LIT .)
    >               reduce using rule 48 (expr -> INT_LIT .)
    GE              reduce using rule 48 (expr -> INT_LIT .)
    <               reduce using rule 48 (expr -> INT_LIT .)
    LE              reduce using rule 48 (expr -> INT_LIT .)
    NE              reduce using rule 48 (expr -> INT_LIT .)
    EQ              reduce using rule 48 (expr -> INT_LIT .)
    AND             reduce using rule 48 (expr -> INT_LIT .)
    OR              reduce using rule 48 (expr -> INT_LIT .)
    )               reduce using rule 48 (expr -> INT_LIT .)
    ,               reduce using rule 48 (expr -> INT_LIT .)
    ]               reduce using rule 48 (expr -> INT_LIT .)


state 61

    (49) expr -> FALSE .
    ;               reduce using rule 49 (expr -> FALSE .)
    MOD             reduce using rule 49 (expr -> FALSE .)
    DIVIDE          reduce using rule 49 (expr -> FALSE .)
    TIMES           reduce using rule 49 (expr -> FALSE .)
    -               reduce using rule 49 (expr -> FALSE .)
    +               reduce using rule 49 (expr -> FALSE .)
    >               reduce using rule 49 (expr -> FALSE .)
    GE              reduce using rule 49 (expr -> FALSE .)
    <               reduce using rule 49 (expr -> FALSE .)
    LE              reduce using rule 49 (expr -> FALSE .)
    NE              reduce using rule 49 (expr -> FALSE .)
    EQ              reduce using rule 49 (expr -> FALSE .)
    AND             reduce using rule 49 (expr -> FALSE .)
    OR              reduce using rule 49 (expr -> FALSE .)
    )               reduce using rule 49 (expr -> FALSE .)
    ,               reduce using rule 49 (expr -> FALSE .)
    ]               reduce using rule 49 (expr -> FALSE .)


state 62

    (50) expr -> TRUE .
    ;               reduce using rule 50 (expr -> TRUE .)
    MOD             reduce using rule 50 (expr -> TRUE .)
    DIVIDE          reduce using rule 50 (expr -> TRUE .)
    TIMES           reduce using rule 50 (expr -> TRUE .)
    -               reduce using rule 50 (expr -> TRUE .)
    +               reduce using rule 50 (expr -> TRUE .)
    >               reduce using rule 50 (expr -> TRUE .)
    GE              reduce using rule 50 (expr -> TRUE .)
    <               reduce using rule 50 (expr -> TRUE .)
    LE              reduce using rule 50 (expr -> TRUE .)
    NE              reduce using rule 50 (expr -> TRUE .)
    EQ              reduce using rule 50 (expr -> TRUE .)
    AND             reduce using rule 50 (expr -> TRUE .)
    OR              reduce using rule 50 (expr -> TRUE .)
    )               reduce using rule 50 (expr -> TRUE .)
    ,               reduce using rule 50 (expr -> TRUE .)
    ]               reduce using rule 50 (expr -> TRUE .)


state 63

    (51) expr -> BOOL_LIT .
    ;               reduce using rule 51 (expr -> BOOL_LIT .)
    MOD             reduce using rule 51 (expr -> BOOL_LIT .)
    DIVIDE          reduce using rule 51 (expr -> BOOL_LIT .)
    TIMES           reduce using rule 51 (expr -> BOOL_LIT .)
    -               reduce using rule 51 (expr -> BOOL_LIT .)
    +               reduce using rule 51 (expr -> BOOL_LIT .)
    >               reduce using rule 51 (expr -> BOOL_LIT .)
    GE              reduce using rule 51 (expr -> BOOL_LIT .)
    <               reduce using rule 51 (expr -> BOOL_LIT .)
    LE              reduce using rule 51 (expr -> BOOL_LIT .)
    NE              reduce using rule 51 (expr -> BOOL_LIT .)
    EQ              reduce using rule 51 (expr -> BOOL_LIT .)
    AND             reduce using rule 51 (expr -> BOOL_LIT .)
    OR              reduce using rule 51 (expr -> BOOL_LIT .)
    )               reduce using rule 51 (expr -> BOOL_LIT .)
    ,               reduce using rule 51 (expr -> BOOL_LIT .)
    ]               reduce using rule 51 (expr -> BOOL_LIT .)


state 64

    (52) expr -> IDENT . . SIZE
    (53) expr -> IDENT . ( args )
    (54) expr -> IDENT . [ expr ]
    (55) expr -> IDENT . DEC
    (56) expr -> IDENT . INC
    (59) expr -> IDENT .
    (77) expr -> IDENT . [ expr ] = expr
    (78) expr -> IDENT . MODASSIGN expr
    (79) expr -> IDENT . DIVASSIGN expr
    (80) expr -> IDENT . MULASSIGN expr
    (81) expr -> IDENT . SUBASSIGN expr
    (82) expr -> IDENT . ADDASSIGN expr
    (83) expr -> IDENT . = expr
    .               shift and go to state 93
    (               shift and go to state 94
    [               shift and go to state 95
    DEC             shift and go to state 96
    INC             shift and go to state 97
    ;               reduce using rule 59 (expr -> IDENT .)
    MOD             reduce using rule 59 (expr -> IDENT .)
    DIVIDE          reduce using rule 59 (expr -> IDENT .)
    TIMES           reduce using rule 59 (expr -> IDENT .)
    -               reduce using rule 59 (expr -> IDENT .)
    +               reduce using rule 59 (expr -> IDENT .)
    >               reduce using rule 59 (expr -> IDENT .)
    GE              reduce using rule 59 (expr -> IDENT .)
    <               reduce using rule 59 (expr -> IDENT .)
    LE              reduce using rule 59 (expr -> IDENT .)
    NE              reduce using rule 59 (expr -> IDENT .)
    EQ              reduce using rule 59 (expr -> IDENT .)
    AND             reduce using rule 59 (expr -> IDENT .)
    OR              reduce using rule 59 (expr -> IDENT .)
    )               reduce using rule 59 (expr -> IDENT .)
    ,               reduce using rule 59 (expr -> IDENT .)
    ]               reduce using rule 59 (expr -> IDENT .)
    MODASSIGN       shift and go to state 99
    DIVASSIGN       shift and go to state 100
    MULASSIGN       shift and go to state 101
    SUBASSIGN       shift and go to state 102
    ADDASSIGN       shift and go to state 103
    =               shift and go to state 98


state 65

    (57) expr -> DEC . IDENT
    IDENT           shift and go to state 104


state 66

    (58) expr -> INC . IDENT
    IDENT           shift and go to state 105


state 67

    (61) expr -> PLUS . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 106

state 68

    (62) expr -> MINUS . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 107

state 69

    (63) expr -> ! . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 108

state 70

    (24) local_decl -> type_spec IDENT . [ ] ;
    (25) local_decl -> type_spec IDENT . ;
    [               shift and go to state 109
    ;               shift and go to state 110


state 71

    (43) break_stmt -> BREAK ; .
    }               reduce using rule 43 (break_stmt -> BREAK ; .)
    BREAK           reduce using rule 43 (break_stmt -> BREAK ; .)
    RETURN          reduce using rule 43 (break_stmt -> BREAK ; .)
    FOR             reduce using rule 43 (break_stmt -> BREAK ; .)
    WHILE           reduce using rule 43 (break_stmt -> BREAK ; .)
    IF              reduce using rule 43 (break_stmt -> BREAK ; .)
    {               reduce using rule 43 (break_stmt -> BREAK ; .)
    ;               reduce using rule 43 (break_stmt -> BREAK ; .)
    NEW             reduce using rule 43 (break_stmt -> BREAK ; .)
    STRING_LIT      reduce using rule 43 (break_stmt -> BREAK ; .)
    CHAR_LIT        reduce using rule 43 (break_stmt -> BREAK ; .)
    FLOAT_LIT       reduce using rule 43 (break_stmt -> BREAK ; .)
    INT_LIT         reduce using rule 43 (break_stmt -> BREAK ; .)
    FALSE           reduce using rule 43 (break_stmt -> BREAK ; .)
    TRUE            reduce using rule 43 (break_stmt -> BREAK ; .)
    BOOL_LIT        reduce using rule 43 (break_stmt -> BREAK ; .)
    IDENT           reduce using rule 43 (break_stmt -> BREAK ; .)
    DEC             reduce using rule 43 (break_stmt -> BREAK ; .)
    INC             reduce using rule 43 (break_stmt -> BREAK ; .)
    (               reduce using rule 43 (break_stmt -> BREAK ; .)
    PLUS            reduce using rule 43 (break_stmt -> BREAK ; .)
    MINUS           reduce using rule 43 (break_stmt -> BREAK ; .)
    !               reduce using rule 43 (break_stmt -> BREAK ; .)
    ELSE            reduce using rule 43 (break_stmt -> BREAK ; .)


state 72

    (41) return_stmt -> RETURN expr . ;
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               shift and go to state 111
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 73

    (42) return_stmt -> RETURN ; .
    }               reduce using rule 42 (return_stmt -> RETURN ; .)
    BREAK           reduce using rule 42 (return_stmt -> RETURN ; .)
    RETURN          reduce using rule 42 (return_stmt -> RETURN ; .)
    FOR             reduce using rule 42 (return_stmt -> RETURN ; .)
    WHILE           reduce using rule 42 (return_stmt -> RETURN ; .)
    IF              reduce using rule 42 (return_stmt -> RETURN ; .)
    {               reduce using rule 42 (return_stmt -> RETURN ; .)
    ;               reduce using rule 42 (return_stmt -> RETURN ; .)
    NEW             reduce using rule 42 (return_stmt -> RETURN ; .)
    STRING_LIT      reduce using rule 42 (return_stmt -> RETURN ; .)
    CHAR_LIT        reduce using rule 42 (return_stmt -> RETURN ; .)
    FLOAT_LIT       reduce using rule 42 (return_stmt -> RETURN ; .)
    INT_LIT         reduce using rule 42 (return_stmt -> RETURN ; .)
    FALSE           reduce using rule 42 (return_stmt -> RETURN ; .)
    TRUE            reduce using rule 42 (return_stmt -> RETURN ; .)
    BOOL_LIT        reduce using rule 42 (return_stmt -> RETURN ; .)
    IDENT           reduce using rule 42 (return_stmt -> RETURN ; .)
    DEC             reduce using rule 42 (return_stmt -> RETURN ; .)
    INC             reduce using rule 42 (return_stmt -> RETURN ; .)
    (               reduce using rule 42 (return_stmt -> RETURN ; .)
    PLUS            reduce using rule 42 (return_stmt -> RETURN ; .)
    MINUS           reduce using rule 42 (return_stmt -> RETURN ; .)
    !               reduce using rule 42 (return_stmt -> RETURN ; .)
    ELSE            reduce using rule 42 (return_stmt -> RETURN ; .)


state 74

    (36) expr_stmt -> expr ; .
    }               reduce using rule 36 (expr_stmt -> expr ; .)
    BREAK           reduce using rule 36 (expr_stmt -> expr ; .)
    RETURN          reduce using rule 36 (expr_stmt -> expr ; .)
    FOR             reduce using rule 36 (expr_stmt -> expr ; .)
    WHILE           reduce using rule 36 (expr_stmt -> expr ; .)
    IF              reduce using rule 36 (expr_stmt -> expr ; .)
    {               reduce using rule 36 (expr_stmt -> expr ; .)
    ;               reduce using rule 36 (expr_stmt -> expr ; .)
    NEW             reduce using rule 36 (expr_stmt -> expr ; .)
    STRING_LIT      reduce using rule 36 (expr_stmt -> expr ; .)
    CHAR_LIT        reduce using rule 36 (expr_stmt -> expr ; .)
    FLOAT_LIT       reduce using rule 36 (expr_stmt -> expr ; .)
    INT_LIT         reduce using rule 36 (expr_stmt -> expr ; .)
    FALSE           reduce using rule 36 (expr_stmt -> expr ; .)
    TRUE            reduce using rule 36 (expr_stmt -> expr ; .)
    BOOL_LIT        reduce using rule 36 (expr_stmt -> expr ; .)
    IDENT           reduce using rule 36 (expr_stmt -> expr ; .)
    DEC             reduce using rule 36 (expr_stmt -> expr ; .)
    INC             reduce using rule 36 (expr_stmt -> expr ; .)
    (               reduce using rule 36 (expr_stmt -> expr ; .)
    PLUS            reduce using rule 36 (expr_stmt -> expr ; .)
    MINUS           reduce using rule 36 (expr_stmt -> expr ; .)
    !               reduce using rule 36 (expr_stmt -> expr ; .)
    ELSE            reduce using rule 36 (expr_stmt -> expr ; .)


state 75

    (64) expr -> expr MOD . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 112

state 76

    (65) expr -> expr DIVIDE . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 113

state 77

    (66) expr -> expr TIMES . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 114

state 78

    (67) expr -> expr - . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 115

state 79

    (68) expr -> expr + . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 116

state 80

    (69) expr -> expr > . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 117

state 81

    (70) expr -> expr GE . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 118

state 82

    (71) expr -> expr < . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 119

state 83

    (72) expr -> expr LE . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 120

state 84

    (73) expr -> expr NE . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 121

state 85

    (74) expr -> expr EQ . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 122

state 86

    (75) expr -> expr AND . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 123

state 87

    (76) expr -> expr OR . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 124

state 88

    (38) for_stmt -> FOR ( . expr ; expr ; expr ) stmt
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 125

state 89

    (60) expr -> ( expr . )
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    )               shift and go to state 126
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 90

    (37) while_stmt -> WHILE ( . expr ) stmt
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 127

state 91

    (39) if_stmt -> IF ( . expr ) stmt ELSE stmt
    (40) if_stmt -> IF ( . expr ) stmt
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 128

state 92

    (44) expr -> NEW type_spec . [ expr ]
    [               shift and go to state 129


state 93

    (52) expr -> IDENT . . SIZE
    SIZE            shift and go to state 130


state 94

    (53) expr -> IDENT ( . args )
    (86) args -> . empty
    (87) args -> . arg_list
    (88) empty -> .
    (84) arg_list -> . expr
    (85) arg_list -> . arg_list , expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    )               reduce using rule 88 (empty -> .)
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    args                           shift and go to state 131
    empty                          shift and go to state 132
    arg_list                       shift and go to state 133
    expr                           shift and go to state 134

state 95

    (54) expr -> IDENT [ . expr ]
    (77) expr -> IDENT [ . expr ] = expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 135

state 96

    (55) expr -> IDENT DEC .
    ;               reduce using rule 55 (expr -> IDENT DEC .)
    MOD             reduce using rule 55 (expr -> IDENT DEC .)
    DIVIDE          reduce using rule 55 (expr -> IDENT DEC .)
    TIMES           reduce using rule 55 (expr -> IDENT DEC .)
    -               reduce using rule 55 (expr -> IDENT DEC .)
    +               reduce using rule 55 (expr -> IDENT DEC .)
    >               reduce using rule 55 (expr -> IDENT DEC .)
    GE              reduce using rule 55 (expr -> IDENT DEC .)
    <               reduce using rule 55 (expr -> IDENT DEC .)
    LE              reduce using rule 55 (expr -> IDENT DEC .)
    NE              reduce using rule 55 (expr -> IDENT DEC .)
    EQ              reduce using rule 55 (expr -> IDENT DEC .)
    AND             reduce using rule 55 (expr -> IDENT DEC .)
    OR              reduce using rule 55 (expr -> IDENT DEC .)
    )               reduce using rule 55 (expr -> IDENT DEC .)
    ,               reduce using rule 55 (expr -> IDENT DEC .)
    ]               reduce using rule 55 (expr -> IDENT DEC .)


state 97

    (56) expr -> IDENT INC .
    ;               reduce using rule 56 (expr -> IDENT INC .)
    MOD             reduce using rule 56 (expr -> IDENT INC .)
    DIVIDE          reduce using rule 56 (expr -> IDENT INC .)
    TIMES           reduce using rule 56 (expr -> IDENT INC .)
    -               reduce using rule 56 (expr -> IDENT INC .)
    +               reduce using rule 56 (expr -> IDENT INC .)
    >               reduce using rule 56 (expr -> IDENT INC .)
    GE              reduce using rule 56 (expr -> IDENT INC .)
    <               reduce using rule 56 (expr -> IDENT INC .)
    LE              reduce using rule 56 (expr -> IDENT INC .)
    NE              reduce using rule 56 (expr -> IDENT INC .)
    EQ              reduce using rule 56 (expr -> IDENT INC .)
    AND             reduce using rule 56 (expr -> IDENT INC .)
    OR              reduce using rule 56 (expr -> IDENT INC .)
    )               reduce using rule 56 (expr -> IDENT INC .)
    ,               reduce using rule 56 (expr -> IDENT INC .)
    ]               reduce using rule 56 (expr -> IDENT INC .)


state 98

    (83) expr -> IDENT = . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 136

state 99

    (78) expr -> IDENT MODASSIGN . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 137

state 100

    (79) expr -> IDENT DIVASSIGN . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 138

state 101

    (80) expr -> IDENT MULASSIGN . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 139

state 102

    (81) expr -> IDENT SUBASSIGN . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 140

state 103

    (82) expr -> IDENT ADDASSIGN . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 141

state 104

    (57) expr -> DEC IDENT .
    ;               reduce using rule 57 (expr -> DEC IDENT .)
    MOD             reduce using rule 57 (expr -> DEC IDENT .)
    DIVIDE          reduce using rule 57 (expr -> DEC IDENT .)
    TIMES           reduce using rule 57 (expr -> DEC IDENT .)
    -               reduce using rule 57 (expr -> DEC IDENT .)
    +               reduce using rule 57 (expr -> DEC IDENT .)
    >               reduce using rule 57 (expr -> DEC IDENT .)
    GE              reduce using rule 57 (expr -> DEC IDENT .)
    <               reduce using rule 57 (expr -> DEC IDENT .)
    LE              reduce using rule 57 (expr -> DEC IDENT .)
    NE              reduce using rule 57 (expr -> DEC IDENT .)
    EQ              reduce using rule 57 (expr -> DEC IDENT .)
    AND             reduce using rule 57 (expr -> DEC IDENT .)
    OR              reduce using rule 57 (expr -> DEC IDENT .)
    )               reduce using rule 57 (expr -> DEC IDENT .)
    ,               reduce using rule 57 (expr -> DEC IDENT .)
    ]               reduce using rule 57 (expr -> DEC IDENT .)


state 105

    (58) expr -> INC IDENT .
    ;               reduce using rule 58 (expr -> INC IDENT .)
    MOD             reduce using rule 58 (expr -> INC IDENT .)
    DIVIDE          reduce using rule 58 (expr -> INC IDENT .)
    TIMES           reduce using rule 58 (expr -> INC IDENT .)
    -               reduce using rule 58 (expr -> INC IDENT .)
    +               reduce using rule 58 (expr -> INC IDENT .)
    >               reduce using rule 58 (expr -> INC IDENT .)
    GE              reduce using rule 58 (expr -> INC IDENT .)
    <               reduce using rule 58 (expr -> INC IDENT .)
    LE              reduce using rule 58 (expr -> INC IDENT .)
    NE              reduce using rule 58 (expr -> INC IDENT .)
    EQ              reduce using rule 58 (expr -> INC IDENT .)
    AND             reduce using rule 58 (expr -> INC IDENT .)
    OR              reduce using rule 58 (expr -> INC IDENT .)
    )               reduce using rule 58 (expr -> INC IDENT .)
    ,               reduce using rule 58 (expr -> INC IDENT .)
    ]               reduce using rule 58 (expr -> INC IDENT .)


state 106

    (61) expr -> PLUS expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 61 (expr -> PLUS expr .)
    MOD             reduce using rule 61 (expr -> PLUS expr .)
    DIVIDE          reduce using rule 61 (expr -> PLUS expr .)
    TIMES           reduce using rule 61 (expr -> PLUS expr .)
    -               reduce using rule 61 (expr -> PLUS expr .)
    +               reduce using rule 61 (expr -> PLUS expr .)
    >               reduce using rule 61 (expr -> PLUS expr .)
    GE              reduce using rule 61 (expr -> PLUS expr .)
    <               reduce using rule 61 (expr -> PLUS expr .)
    LE              reduce using rule 61 (expr -> PLUS expr .)
    NE              reduce using rule 61 (expr -> PLUS expr .)
    EQ              reduce using rule 61 (expr -> PLUS expr .)
    AND             reduce using rule 61 (expr -> PLUS expr .)
    OR              reduce using rule 61 (expr -> PLUS expr .)
    )               reduce using rule 61 (expr -> PLUS expr .)
    ,               reduce using rule 61 (expr -> PLUS expr .)
    ]               reduce using rule 61 (expr -> PLUS expr .)


state 107

    (62) expr -> MINUS expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 62 (expr -> MINUS expr .)
    MOD             reduce using rule 62 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 62 (expr -> MINUS expr .)
    TIMES           reduce using rule 62 (expr -> MINUS expr .)
    -               reduce using rule 62 (expr -> MINUS expr .)
    +               reduce using rule 62 (expr -> MINUS expr .)
    >               reduce using rule 62 (expr -> MINUS expr .)
    GE              reduce using rule 62 (expr -> MINUS expr .)
    <               reduce using rule 62 (expr -> MINUS expr .)
    LE              reduce using rule 62 (expr -> MINUS expr .)
    NE              reduce using rule 62 (expr -> MINUS expr .)
    EQ              reduce using rule 62 (expr -> MINUS expr .)
    AND             reduce using rule 62 (expr -> MINUS expr .)
    OR              reduce using rule 62 (expr -> MINUS expr .)
    )               reduce using rule 62 (expr -> MINUS expr .)
    ,               reduce using rule 62 (expr -> MINUS expr .)
    ]               reduce using rule 62 (expr -> MINUS expr .)


state 108

    (63) expr -> ! expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 63 (expr -> ! expr .)
    MOD             reduce using rule 63 (expr -> ! expr .)
    DIVIDE          reduce using rule 63 (expr -> ! expr .)
    TIMES           reduce using rule 63 (expr -> ! expr .)
    -               reduce using rule 63 (expr -> ! expr .)
    +               reduce using rule 63 (expr -> ! expr .)
    >               reduce using rule 63 (expr -> ! expr .)
    GE              reduce using rule 63 (expr -> ! expr .)
    <               reduce using rule 63 (expr -> ! expr .)
    LE              reduce using rule 63 (expr -> ! expr .)
    NE              reduce using rule 63 (expr -> ! expr .)
    EQ              reduce using rule 63 (expr -> ! expr .)
    AND             reduce using rule 63 (expr -> ! expr .)
    OR              reduce using rule 63 (expr -> ! expr .)
    )               reduce using rule 63 (expr -> ! expr .)
    ,               reduce using rule 63 (expr -> ! expr .)
    ]               reduce using rule 63 (expr -> ! expr .)


state 109

    (24) local_decl -> type_spec IDENT [ . ] ;
    ]               shift and go to state 142


state 110

    (25) local_decl -> type_spec IDENT ; .
    CHAR            reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    FLOAT           reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    INT             reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    BOOL            reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    VOID            reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    }               reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    BREAK           reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    RETURN          reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    FOR             reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    WHILE           reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    IF              reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    {               reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    ;               reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    NEW             reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    STRING_LIT      reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    CHAR_LIT        reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    FLOAT_LIT       reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    INT_LIT         reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    FALSE           reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    TRUE            reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    BOOL_LIT        reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    IDENT           reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    DEC             reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    INC             reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    (               reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    PLUS            reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    MINUS           reduce using rule 25 (local_decl -> type_spec IDENT ; .)
    !               reduce using rule 25 (local_decl -> type_spec IDENT ; .)


state 111

    (41) return_stmt -> RETURN expr ; .
    }               reduce using rule 41 (return_stmt -> RETURN expr ; .)
    BREAK           reduce using rule 41 (return_stmt -> RETURN expr ; .)
    RETURN          reduce using rule 41 (return_stmt -> RETURN expr ; .)
    FOR             reduce using rule 41 (return_stmt -> RETURN expr ; .)
    WHILE           reduce using rule 41 (return_stmt -> RETURN expr ; .)
    IF              reduce using rule 41 (return_stmt -> RETURN expr ; .)
    {               reduce using rule 41 (return_stmt -> RETURN expr ; .)
    ;               reduce using rule 41 (return_stmt -> RETURN expr ; .)
    NEW             reduce using rule 41 (return_stmt -> RETURN expr ; .)
    STRING_LIT      reduce using rule 41 (return_stmt -> RETURN expr ; .)
    CHAR_LIT        reduce using rule 41 (return_stmt -> RETURN expr ; .)
    FLOAT_LIT       reduce using rule 41 (return_stmt -> RETURN expr ; .)
    INT_LIT         reduce using rule 41 (return_stmt -> RETURN expr ; .)
    FALSE           reduce using rule 41 (return_stmt -> RETURN expr ; .)
    TRUE            reduce using rule 41 (return_stmt -> RETURN expr ; .)
    BOOL_LIT        reduce using rule 41 (return_stmt -> RETURN expr ; .)
    IDENT           reduce using rule 41 (return_stmt -> RETURN expr ; .)
    DEC             reduce using rule 41 (return_stmt -> RETURN expr ; .)
    INC             reduce using rule 41 (return_stmt -> RETURN expr ; .)
    (               reduce using rule 41 (return_stmt -> RETURN expr ; .)
    PLUS            reduce using rule 41 (return_stmt -> RETURN expr ; .)
    MINUS           reduce using rule 41 (return_stmt -> RETURN expr ; .)
    !               reduce using rule 41 (return_stmt -> RETURN expr ; .)
    ELSE            reduce using rule 41 (return_stmt -> RETURN expr ; .)


state 112

    (64) expr -> expr MOD expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 64 (expr -> expr MOD expr .)
    MOD             reduce using rule 64 (expr -> expr MOD expr .)
    DIVIDE          reduce using rule 64 (expr -> expr MOD expr .)
    TIMES           reduce using rule 64 (expr -> expr MOD expr .)
    -               reduce using rule 64 (expr -> expr MOD expr .)
    +               reduce using rule 64 (expr -> expr MOD expr .)
    >               reduce using rule 64 (expr -> expr MOD expr .)
    GE              reduce using rule 64 (expr -> expr MOD expr .)
    <               reduce using rule 64 (expr -> expr MOD expr .)
    LE              reduce using rule 64 (expr -> expr MOD expr .)
    NE              reduce using rule 64 (expr -> expr MOD expr .)
    EQ              reduce using rule 64 (expr -> expr MOD expr .)
    AND             reduce using rule 64 (expr -> expr MOD expr .)
    OR              reduce using rule 64 (expr -> expr MOD expr .)
    )               reduce using rule 64 (expr -> expr MOD expr .)
    ,               reduce using rule 64 (expr -> expr MOD expr .)
    ]               reduce using rule 64 (expr -> expr MOD expr .)


state 113

    (65) expr -> expr DIVIDE expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 65 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 65 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 65 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 65 (expr -> expr DIVIDE expr .)
    -               reduce using rule 65 (expr -> expr DIVIDE expr .)
    +               reduce using rule 65 (expr -> expr DIVIDE expr .)
    >               reduce using rule 65 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 65 (expr -> expr DIVIDE expr .)
    <               reduce using rule 65 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 65 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 65 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 65 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 65 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 65 (expr -> expr DIVIDE expr .)
    )               reduce using rule 65 (expr -> expr DIVIDE expr .)
    ,               reduce using rule 65 (expr -> expr DIVIDE expr .)
    ]               reduce using rule 65 (expr -> expr DIVIDE expr .)


state 114

    (66) expr -> expr TIMES expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 66 (expr -> expr TIMES expr .)
    MOD             reduce using rule 66 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 66 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 66 (expr -> expr TIMES expr .)
    -               reduce using rule 66 (expr -> expr TIMES expr .)
    +               reduce using rule 66 (expr -> expr TIMES expr .)
    >               reduce using rule 66 (expr -> expr TIMES expr .)
    GE              reduce using rule 66 (expr -> expr TIMES expr .)
    <               reduce using rule 66 (expr -> expr TIMES expr .)
    LE              reduce using rule 66 (expr -> expr TIMES expr .)
    NE              reduce using rule 66 (expr -> expr TIMES expr .)
    EQ              reduce using rule 66 (expr -> expr TIMES expr .)
    AND             reduce using rule 66 (expr -> expr TIMES expr .)
    OR              reduce using rule 66 (expr -> expr TIMES expr .)
    )               reduce using rule 66 (expr -> expr TIMES expr .)
    ,               reduce using rule 66 (expr -> expr TIMES expr .)
    ]               reduce using rule 66 (expr -> expr TIMES expr .)


state 115

    (67) expr -> expr - expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 67 (expr -> expr - expr .)
    -               reduce using rule 67 (expr -> expr - expr .)
    +               reduce using rule 67 (expr -> expr - expr .)
    >               reduce using rule 67 (expr -> expr - expr .)
    GE              reduce using rule 67 (expr -> expr - expr .)
    <               reduce using rule 67 (expr -> expr - expr .)
    LE              reduce using rule 67 (expr -> expr - expr .)
    NE              reduce using rule 67 (expr -> expr - expr .)
    EQ              reduce using rule 67 (expr -> expr - expr .)
    AND             reduce using rule 67 (expr -> expr - expr .)
    OR              reduce using rule 67 (expr -> expr - expr .)
    )               reduce using rule 67 (expr -> expr - expr .)
    ,               reduce using rule 67 (expr -> expr - expr .)
    ]               reduce using rule 67 (expr -> expr - expr .)
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77


state 116

    (68) expr -> expr + expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 68 (expr -> expr + expr .)
    -               reduce using rule 68 (expr -> expr + expr .)
    +               reduce using rule 68 (expr -> expr + expr .)
    >               reduce using rule 68 (expr -> expr + expr .)
    GE              reduce using rule 68 (expr -> expr + expr .)
    <               reduce using rule 68 (expr -> expr + expr .)
    LE              reduce using rule 68 (expr -> expr + expr .)
    NE              reduce using rule 68 (expr -> expr + expr .)
    EQ              reduce using rule 68 (expr -> expr + expr .)
    AND             reduce using rule 68 (expr -> expr + expr .)
    OR              reduce using rule 68 (expr -> expr + expr .)
    )               reduce using rule 68 (expr -> expr + expr .)
    ,               reduce using rule 68 (expr -> expr + expr .)
    ]               reduce using rule 68 (expr -> expr + expr .)
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77


state 117

    (69) expr -> expr > expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 69 (expr -> expr > expr .)
    >               reduce using rule 69 (expr -> expr > expr .)
    GE              reduce using rule 69 (expr -> expr > expr .)
    <               reduce using rule 69 (expr -> expr > expr .)
    LE              reduce using rule 69 (expr -> expr > expr .)
    NE              reduce using rule 69 (expr -> expr > expr .)
    EQ              reduce using rule 69 (expr -> expr > expr .)
    AND             reduce using rule 69 (expr -> expr > expr .)
    OR              reduce using rule 69 (expr -> expr > expr .)
    )               reduce using rule 69 (expr -> expr > expr .)
    ,               reduce using rule 69 (expr -> expr > expr .)
    ]               reduce using rule 69 (expr -> expr > expr .)
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79


state 118

    (70) expr -> expr GE expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 70 (expr -> expr GE expr .)
    >               reduce using rule 70 (expr -> expr GE expr .)
    GE              reduce using rule 70 (expr -> expr GE expr .)
    <               reduce using rule 70 (expr -> expr GE expr .)
    LE              reduce using rule 70 (expr -> expr GE expr .)
    NE              reduce using rule 70 (expr -> expr GE expr .)
    EQ              reduce using rule 70 (expr -> expr GE expr .)
    AND             reduce using rule 70 (expr -> expr GE expr .)
    OR              reduce using rule 70 (expr -> expr GE expr .)
    )               reduce using rule 70 (expr -> expr GE expr .)
    ,               reduce using rule 70 (expr -> expr GE expr .)
    ]               reduce using rule 70 (expr -> expr GE expr .)
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79


state 119

    (71) expr -> expr < expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 71 (expr -> expr < expr .)
    >               reduce using rule 71 (expr -> expr < expr .)
    GE              reduce using rule 71 (expr -> expr < expr .)
    <               reduce using rule 71 (expr -> expr < expr .)
    LE              reduce using rule 71 (expr -> expr < expr .)
    NE              reduce using rule 71 (expr -> expr < expr .)
    EQ              reduce using rule 71 (expr -> expr < expr .)
    AND             reduce using rule 71 (expr -> expr < expr .)
    OR              reduce using rule 71 (expr -> expr < expr .)
    )               reduce using rule 71 (expr -> expr < expr .)
    ,               reduce using rule 71 (expr -> expr < expr .)
    ]               reduce using rule 71 (expr -> expr < expr .)
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79


state 120

    (72) expr -> expr LE expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 72 (expr -> expr LE expr .)
    >               reduce using rule 72 (expr -> expr LE expr .)
    GE              reduce using rule 72 (expr -> expr LE expr .)
    <               reduce using rule 72 (expr -> expr LE expr .)
    LE              reduce using rule 72 (expr -> expr LE expr .)
    NE              reduce using rule 72 (expr -> expr LE expr .)
    EQ              reduce using rule 72 (expr -> expr LE expr .)
    AND             reduce using rule 72 (expr -> expr LE expr .)
    OR              reduce using rule 72 (expr -> expr LE expr .)
    )               reduce using rule 72 (expr -> expr LE expr .)
    ,               reduce using rule 72 (expr -> expr LE expr .)
    ]               reduce using rule 72 (expr -> expr LE expr .)
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79


state 121

    (73) expr -> expr NE expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 73 (expr -> expr NE expr .)
    NE              reduce using rule 73 (expr -> expr NE expr .)
    EQ              reduce using rule 73 (expr -> expr NE expr .)
    AND             reduce using rule 73 (expr -> expr NE expr .)
    OR              reduce using rule 73 (expr -> expr NE expr .)
    )               reduce using rule 73 (expr -> expr NE expr .)
    ,               reduce using rule 73 (expr -> expr NE expr .)
    ]               reduce using rule 73 (expr -> expr NE expr .)
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83


state 122

    (74) expr -> expr EQ expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 74 (expr -> expr EQ expr .)
    NE              reduce using rule 74 (expr -> expr EQ expr .)
    EQ              reduce using rule 74 (expr -> expr EQ expr .)
    AND             reduce using rule 74 (expr -> expr EQ expr .)
    OR              reduce using rule 74 (expr -> expr EQ expr .)
    )               reduce using rule 74 (expr -> expr EQ expr .)
    ,               reduce using rule 74 (expr -> expr EQ expr .)
    ]               reduce using rule 74 (expr -> expr EQ expr .)
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83


state 123

    (75) expr -> expr AND expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 75 (expr -> expr AND expr .)
    AND             reduce using rule 75 (expr -> expr AND expr .)
    OR              reduce using rule 75 (expr -> expr AND expr .)
    )               reduce using rule 75 (expr -> expr AND expr .)
    ,               reduce using rule 75 (expr -> expr AND expr .)
    ]               reduce using rule 75 (expr -> expr AND expr .)
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85


state 124

    (76) expr -> expr OR expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 76 (expr -> expr OR expr .)
    OR              reduce using rule 76 (expr -> expr OR expr .)
    )               reduce using rule 76 (expr -> expr OR expr .)
    ,               reduce using rule 76 (expr -> expr OR expr .)
    ]               reduce using rule 76 (expr -> expr OR expr .)
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85
    AND             shift and go to state 86


state 125

    (38) for_stmt -> FOR ( expr . ; expr ; expr ) stmt
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               shift and go to state 143
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 126

    (60) expr -> ( expr ) .
    ;               reduce using rule 60 (expr -> ( expr ) .)
    MOD             reduce using rule 60 (expr -> ( expr ) .)
    DIVIDE          reduce using rule 60 (expr -> ( expr ) .)
    TIMES           reduce using rule 60 (expr -> ( expr ) .)
    -               reduce using rule 60 (expr -> ( expr ) .)
    +               reduce using rule 60 (expr -> ( expr ) .)
    >               reduce using rule 60 (expr -> ( expr ) .)
    GE              reduce using rule 60 (expr -> ( expr ) .)
    <               reduce using rule 60 (expr -> ( expr ) .)
    LE              reduce using rule 60 (expr -> ( expr ) .)
    NE              reduce using rule 60 (expr -> ( expr ) .)
    EQ              reduce using rule 60 (expr -> ( expr ) .)
    AND             reduce using rule 60 (expr -> ( expr ) .)
    OR              reduce using rule 60 (expr -> ( expr ) .)
    )               reduce using rule 60 (expr -> ( expr ) .)
    ,               reduce using rule 60 (expr -> ( expr ) .)
    ]               reduce using rule 60 (expr -> ( expr ) .)


state 127

    (37) while_stmt -> WHILE ( expr . ) stmt
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    )               shift and go to state 144
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 128

    (39) if_stmt -> IF ( expr . ) stmt ELSE stmt
    (40) if_stmt -> IF ( expr . ) stmt
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    )               shift and go to state 145
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 129

    (44) expr -> NEW type_spec [ . expr ]
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 146

state 130

    (52) expr -> IDENT . SIZE .
    ;               reduce using rule 52 (expr -> IDENT . SIZE .)
    MOD             reduce using rule 52 (expr -> IDENT . SIZE .)
    DIVIDE          reduce using rule 52 (expr -> IDENT . SIZE .)
    TIMES           reduce using rule 52 (expr -> IDENT . SIZE .)
    -               reduce using rule 52 (expr -> IDENT . SIZE .)
    +               reduce using rule 52 (expr -> IDENT . SIZE .)
    >               reduce using rule 52 (expr -> IDENT . SIZE .)
    GE              reduce using rule 52 (expr -> IDENT . SIZE .)
    <               reduce using rule 52 (expr -> IDENT . SIZE .)
    LE              reduce using rule 52 (expr -> IDENT . SIZE .)
    NE              reduce using rule 52 (expr -> IDENT . SIZE .)
    EQ              reduce using rule 52 (expr -> IDENT . SIZE .)
    AND             reduce using rule 52 (expr -> IDENT . SIZE .)
    OR              reduce using rule 52 (expr -> IDENT . SIZE .)
    )               reduce using rule 52 (expr -> IDENT . SIZE .)
    ,               reduce using rule 52 (expr -> IDENT . SIZE .)
    ]               reduce using rule 52 (expr -> IDENT . SIZE .)


state 131

    (53) expr -> IDENT ( args . )
    )               shift and go to state 147


state 132

    (86) args -> empty .
    )               reduce using rule 86 (args -> empty .)


state 133

    (87) args -> arg_list .
    (85) arg_list -> arg_list . , expr
    )               reduce using rule 87 (args -> arg_list .)
    ,               shift and go to state 148


state 134

    (84) arg_list -> expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ,               reduce using rule 84 (arg_list -> expr .)
    )               reduce using rule 84 (arg_list -> expr .)
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 135

    (54) expr -> IDENT [ expr . ]
    (77) expr -> IDENT [ expr . ] = expr
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ]               shift and go to state 149
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 136

    (83) expr -> IDENT = expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 83 (expr -> IDENT = expr .)
    )               reduce using rule 83 (expr -> IDENT = expr .)
    ,               reduce using rule 83 (expr -> IDENT = expr .)
    ]               reduce using rule 83 (expr -> IDENT = expr .)
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 137

    (78) expr -> IDENT MODASSIGN expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 78 (expr -> IDENT MODASSIGN expr .)
    )               reduce using rule 78 (expr -> IDENT MODASSIGN expr .)
    ,               reduce using rule 78 (expr -> IDENT MODASSIGN expr .)
    ]               reduce using rule 78 (expr -> IDENT MODASSIGN expr .)
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 138

    (79) expr -> IDENT DIVASSIGN expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 79 (expr -> IDENT DIVASSIGN expr .)
    )               reduce using rule 79 (expr -> IDENT DIVASSIGN expr .)
    ,               reduce using rule 79 (expr -> IDENT DIVASSIGN expr .)
    ]               reduce using rule 79 (expr -> IDENT DIVASSIGN expr .)
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 139

    (80) expr -> IDENT MULASSIGN expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 80 (expr -> IDENT MULASSIGN expr .)
    )               reduce using rule 80 (expr -> IDENT MULASSIGN expr .)
    ,               reduce using rule 80 (expr -> IDENT MULASSIGN expr .)
    ]               reduce using rule 80 (expr -> IDENT MULASSIGN expr .)
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 140

    (81) expr -> IDENT SUBASSIGN expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 81 (expr -> IDENT SUBASSIGN expr .)
    )               reduce using rule 81 (expr -> IDENT SUBASSIGN expr .)
    ,               reduce using rule 81 (expr -> IDENT SUBASSIGN expr .)
    ]               reduce using rule 81 (expr -> IDENT SUBASSIGN expr .)
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 141

    (82) expr -> IDENT ADDASSIGN expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 82 (expr -> IDENT ADDASSIGN expr .)
    )               reduce using rule 82 (expr -> IDENT ADDASSIGN expr .)
    ,               reduce using rule 82 (expr -> IDENT ADDASSIGN expr .)
    ]               reduce using rule 82 (expr -> IDENT ADDASSIGN expr .)
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 142

    (24) local_decl -> type_spec IDENT [ ] . ;
    ;               shift and go to state 150


state 143

    (38) for_stmt -> FOR ( expr ; . expr ; expr ) stmt
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 151

state 144

    (37) while_stmt -> WHILE ( expr ) . stmt
    (28) stmt -> . break_stmt
    (29) stmt -> . return_stmt
    (30) stmt -> . for_stmt
    (31) stmt -> . while_stmt
    (32) stmt -> . if_stmt
    (33) stmt -> . compound_stmt
    (34) stmt -> . expr_stmt
    (43) break_stmt -> . BREAK ;
    (41) return_stmt -> . RETURN expr ;
    (42) return_stmt -> . RETURN ;
    (38) for_stmt -> . FOR ( expr ; expr ; expr ) stmt
    (37) while_stmt -> . WHILE ( expr ) stmt
    (39) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (40) if_stmt -> . IF ( expr ) stmt
    (21) compound_stmt -> . { local_decls stmt_list }
    (35) expr_stmt -> . ;
    (36) expr_stmt -> . expr ;
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    BREAK           shift and go to state 48
    RETURN          shift and go to state 50
    FOR             shift and go to state 52
    WHILE           shift and go to state 54
    IF              shift and go to state 55
    {               shift and go to state 30
    ;               shift and go to state 49
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 51
    stmt                           shift and go to state 152
    break_stmt                     shift and go to state 41
    return_stmt                    shift and go to state 42
    for_stmt                       shift and go to state 43
    while_stmt                     shift and go to state 44
    if_stmt                        shift and go to state 45
    compound_stmt                  shift and go to state 46
    expr_stmt                      shift and go to state 47

state 145

    (39) if_stmt -> IF ( expr ) . stmt ELSE stmt
    (40) if_stmt -> IF ( expr ) . stmt
    (28) stmt -> . break_stmt
    (29) stmt -> . return_stmt
    (30) stmt -> . for_stmt
    (31) stmt -> . while_stmt
    (32) stmt -> . if_stmt
    (33) stmt -> . compound_stmt
    (34) stmt -> . expr_stmt
    (43) break_stmt -> . BREAK ;
    (41) return_stmt -> . RETURN expr ;
    (42) return_stmt -> . RETURN ;
    (38) for_stmt -> . FOR ( expr ; expr ; expr ) stmt
    (37) while_stmt -> . WHILE ( expr ) stmt
    (39) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (40) if_stmt -> . IF ( expr ) stmt
    (21) compound_stmt -> . { local_decls stmt_list }
    (35) expr_stmt -> . ;
    (36) expr_stmt -> . expr ;
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    BREAK           shift and go to state 48
    RETURN          shift and go to state 50
    FOR             shift and go to state 52
    WHILE           shift and go to state 54
    IF              shift and go to state 55
    {               shift and go to state 30
    ;               shift and go to state 49
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 51
    stmt                           shift and go to state 153
    break_stmt                     shift and go to state 41
    return_stmt                    shift and go to state 42
    for_stmt                       shift and go to state 43
    while_stmt                     shift and go to state 44
    if_stmt                        shift and go to state 45
    compound_stmt                  shift and go to state 46
    expr_stmt                      shift and go to state 47

state 146

    (44) expr -> NEW type_spec [ expr . ]
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ]               shift and go to state 154
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 147

    (53) expr -> IDENT ( args ) .
    ;               reduce using rule 53 (expr -> IDENT ( args ) .)
    MOD             reduce using rule 53 (expr -> IDENT ( args ) .)
    DIVIDE          reduce using rule 53 (expr -> IDENT ( args ) .)
    TIMES           reduce using rule 53 (expr -> IDENT ( args ) .)
    -               reduce using rule 53 (expr -> IDENT ( args ) .)
    +               reduce using rule 53 (expr -> IDENT ( args ) .)
    >               reduce using rule 53 (expr -> IDENT ( args ) .)
    GE              reduce using rule 53 (expr -> IDENT ( args ) .)
    <               reduce using rule 53 (expr -> IDENT ( args ) .)
    LE              reduce using rule 53 (expr -> IDENT ( args ) .)
    NE              reduce using rule 53 (expr -> IDENT ( args ) .)
    EQ              reduce using rule 53 (expr -> IDENT ( args ) .)
    AND             reduce using rule 53 (expr -> IDENT ( args ) .)
    OR              reduce using rule 53 (expr -> IDENT ( args ) .)
    )               reduce using rule 53 (expr -> IDENT ( args ) .)
    ,               reduce using rule 53 (expr -> IDENT ( args ) .)
    ]               reduce using rule 53 (expr -> IDENT ( args ) .)


state 148

    (85) arg_list -> arg_list , . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 155

state 149

    (54) expr -> IDENT [ expr ] .
    (77) expr -> IDENT [ expr ] . = expr
    ;               reduce using rule 54 (expr -> IDENT [ expr ] .)
    MOD             reduce using rule 54 (expr -> IDENT [ expr ] .)
    DIVIDE          reduce using rule 54 (expr -> IDENT [ expr ] .)
    TIMES           reduce using rule 54 (expr -> IDENT [ expr ] .)
    -               reduce using rule 54 (expr -> IDENT [ expr ] .)
    +               reduce using rule 54 (expr -> IDENT [ expr ] .)
    >               reduce using rule 54 (expr -> IDENT [ expr ] .)
    GE              reduce using rule 54 (expr -> IDENT [ expr ] .)
    <               reduce using rule 54 (expr -> IDENT [ expr ] .)
    LE              reduce using rule 54 (expr -> IDENT [ expr ] .)
    NE              reduce using rule 54 (expr -> IDENT [ expr ] .)
    EQ              reduce using rule 54 (expr -> IDENT [ expr ] .)
    AND             reduce using rule 54 (expr -> IDENT [ expr ] .)
    OR              reduce using rule 54 (expr -> IDENT [ expr ] .)
    )               reduce using rule 54 (expr -> IDENT [ expr ] .)
    ,               reduce using rule 54 (expr -> IDENT [ expr ] .)
    ]               reduce using rule 54 (expr -> IDENT [ expr ] .)
    =               shift and go to state 156


state 150

    (24) local_decl -> type_spec IDENT [ ] ; .
    CHAR            reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    FLOAT           reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    INT             reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    BOOL            reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    VOID            reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    }               reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    BREAK           reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    RETURN          reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    FOR             reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    WHILE           reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    IF              reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    {               reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    ;               reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    NEW             reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    STRING_LIT      reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    CHAR_LIT        reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    FLOAT_LIT       reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    INT_LIT         reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    FALSE           reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    TRUE            reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    BOOL_LIT        reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    IDENT           reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    DEC             reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    INC             reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    (               reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    PLUS            reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    MINUS           reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)
    !               reduce using rule 24 (local_decl -> type_spec IDENT [ ] ; .)


state 151

    (38) for_stmt -> FOR ( expr ; expr . ; expr ) stmt
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               shift and go to state 157
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 152

    (37) while_stmt -> WHILE ( expr ) stmt .
    }               reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    BREAK           reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    RETURN          reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    FOR             reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    WHILE           reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    IF              reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    {               reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    ;               reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    NEW             reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    STRING_LIT      reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    CHAR_LIT        reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    FLOAT_LIT       reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    INT_LIT         reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    FALSE           reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    TRUE            reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    BOOL_LIT        reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    IDENT           reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    DEC             reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    INC             reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    (               reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    PLUS            reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    MINUS           reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    !               reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)
    ELSE            reduce using rule 37 (while_stmt -> WHILE ( expr ) stmt .)


state 153

    (39) if_stmt -> IF ( expr ) stmt . ELSE stmt
    (40) if_stmt -> IF ( expr ) stmt .
    }               reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    BREAK           reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    RETURN          reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    FOR             reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    WHILE           reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    IF              reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    {               reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    ;               reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    NEW             reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    STRING_LIT      reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    CHAR_LIT        reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    FLOAT_LIT       reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    INT_LIT         reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    FALSE           reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    TRUE            reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    BOOL_LIT        reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    IDENT           reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    DEC             reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    INC             reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    (               reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    PLUS            reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    MINUS           reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    !               reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)
    ELSE            reduce using rule 40 (if_stmt -> IF ( expr ) stmt .)


state 154

    (44) expr -> NEW type_spec [ expr ] .
    ;               reduce using rule 44 (expr -> NEW type_spec [ expr ] .)
    MOD             reduce using rule 44 (expr -> NEW type_spec [ expr ] .)
    DIVIDE          reduce using rule 44 (expr -> NEW type_spec [ expr ] .)
    TIMES           reduce using rule 44 (expr -> NEW type_spec [ expr ] .)
    -               reduce using rule 44 (expr -> NEW type_spec [ expr ] .)
    +               reduce using rule 44 (expr -> NEW type_spec [ expr ] .)
    >               reduce using rule 44 (expr -> NEW type_spec [ expr ] .)
    GE              reduce using rule 44 (expr -> NEW type_spec [ expr ] .)
    <               reduce using rule 44 (expr -> NEW type_spec [ expr ] .)
    LE              reduce using rule 44 (expr -> NEW type_spec [ expr ] .)
    NE              reduce using rule 44 (expr -> NEW type_spec [ expr ] .)
    EQ              reduce using rule 44 (expr -> NEW type_spec [ expr ] .)
    AND             reduce using rule 44 (expr -> NEW type_spec [ expr ] .)
    OR              reduce using rule 44 (expr -> NEW type_spec [ expr ] .)
    )               reduce using rule 44 (expr -> NEW type_spec [ expr ] .)
    ,               reduce using rule 44 (expr -> NEW type_spec [ expr ] .)
    ]               reduce using rule 44 (expr -> NEW type_spec [ expr ] .)


state 155

    (85) arg_list -> arg_list , expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ,               reduce using rule 85 (arg_list -> arg_list , expr .)
    )               reduce using rule 85 (arg_list -> arg_list , expr .)
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 156

    (77) expr -> IDENT [ expr ] = . expr
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 159

state 157

    (38) for_stmt -> FOR ( expr ; expr ; . expr ) stmt
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 160

state 158

    (39) if_stmt -> IF ( expr ) stmt ELSE . stmt
    (28) stmt -> . break_stmt
    (29) stmt -> . return_stmt
    (30) stmt -> . for_stmt
    (31) stmt -> . while_stmt
    (32) stmt -> . if_stmt
    (33) stmt -> . compound_stmt
    (34) stmt -> . expr_stmt
    (43) break_stmt -> . BREAK ;
    (41) return_stmt -> . RETURN expr ;
    (42) return_stmt -> . RETURN ;
    (38) for_stmt -> . FOR ( expr ; expr ; expr ) stmt
    (37) while_stmt -> . WHILE ( expr ) stmt
    (39) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (40) if_stmt -> . IF ( expr ) stmt
    (21) compound_stmt -> . { local_decls stmt_list }
    (35) expr_stmt -> . ;
    (36) expr_stmt -> . expr ;
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    BREAK           shift and go to state 48
    RETURN          shift and go to state 50
    FOR             shift and go to state 52
    WHILE           shift and go to state 54
    IF              shift and go to state 55
    {               shift and go to state 30
    ;               shift and go to state 49
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 51
    stmt                           shift and go to state 161
    break_stmt                     shift and go to state 41
    return_stmt                    shift and go to state 42
    for_stmt                       shift and go to state 43
    while_stmt                     shift and go to state 44
    if_stmt                        shift and go to state 45
    compound_stmt                  shift and go to state 46
    expr_stmt                      shift and go to state 47

state 159

    (77) expr -> IDENT [ expr ] = expr .
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    ;               reduce using rule 77 (expr -> IDENT [ expr ] = expr .)
    )               reduce using rule 77 (expr -> IDENT [ expr ] = expr .)
    ,               reduce using rule 77 (expr -> IDENT [ expr ] = expr .)
    ]               reduce using rule 77 (expr -> IDENT [ expr ] = expr .)
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 160

    (38) for_stmt -> FOR ( expr ; expr ; expr . ) stmt
    (64) expr -> expr . MOD expr
    (65) expr -> expr . DIVIDE expr
    (66) expr -> expr . TIMES expr
    (67) expr -> expr . - expr
    (68) expr -> expr . + expr
    (69) expr -> expr . > expr
    (70) expr -> expr . GE expr
    (71) expr -> expr . < expr
    (72) expr -> expr . LE expr
    (73) expr -> expr . NE expr
    (74) expr -> expr . EQ expr
    (75) expr -> expr . AND expr
    (76) expr -> expr . OR expr
    )               shift and go to state 162
    MOD             shift and go to state 75
    DIVIDE          shift and go to state 76
    TIMES           shift and go to state 77
    -               shift and go to state 78
    +               shift and go to state 79
    >               shift and go to state 80
    GE              shift and go to state 81
    <               shift and go to state 82
    LE              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 161

    (39) if_stmt -> IF ( expr ) stmt ELSE stmt .
    }               reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    BREAK           reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    RETURN          reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    FOR             reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    WHILE           reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    IF              reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    {               reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    ;               reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    NEW             reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    STRING_LIT      reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    CHAR_LIT        reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    FLOAT_LIT       reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    INT_LIT         reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    FALSE           reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    TRUE            reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    BOOL_LIT        reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    IDENT           reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    DEC             reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    INC             reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    (               reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    PLUS            reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    MINUS           reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    !               reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    ELSE            reduce using rule 39 (if_stmt -> IF ( expr ) stmt ELSE stmt .)


state 162

    (38) for_stmt -> FOR ( expr ; expr ; expr ) . stmt
    (28) stmt -> . break_stmt
    (29) stmt -> . return_stmt
    (30) stmt -> . for_stmt
    (31) stmt -> . while_stmt
    (32) stmt -> . if_stmt
    (33) stmt -> . compound_stmt
    (34) stmt -> . expr_stmt
    (43) break_stmt -> . BREAK ;
    (41) return_stmt -> . RETURN expr ;
    (42) return_stmt -> . RETURN ;
    (38) for_stmt -> . FOR ( expr ; expr ; expr ) stmt
    (37) while_stmt -> . WHILE ( expr ) stmt
    (39) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (40) if_stmt -> . IF ( expr ) stmt
    (21) compound_stmt -> . { local_decls stmt_list }
    (35) expr_stmt -> . ;
    (36) expr_stmt -> . expr ;
    (44) expr -> . NEW type_spec [ expr ]
    (45) expr -> . STRING_LIT
    (46) expr -> . CHAR_LIT
    (47) expr -> . FLOAT_LIT
    (48) expr -> . INT_LIT
    (49) expr -> . FALSE
    (50) expr -> . TRUE
    (51) expr -> . BOOL_LIT
    (52) expr -> . IDENT . SIZE
    (53) expr -> . IDENT ( args )
    (54) expr -> . IDENT [ expr ]
    (55) expr -> . IDENT DEC
    (56) expr -> . IDENT INC
    (57) expr -> . DEC IDENT
    (58) expr -> . INC IDENT
    (59) expr -> . IDENT
    (60) expr -> . ( expr )
    (61) expr -> . PLUS expr
    (62) expr -> . MINUS expr
    (63) expr -> . ! expr
    (64) expr -> . expr MOD expr
    (65) expr -> . expr DIVIDE expr
    (66) expr -> . expr TIMES expr
    (67) expr -> . expr - expr
    (68) expr -> . expr + expr
    (69) expr -> . expr > expr
    (70) expr -> . expr GE expr
    (71) expr -> . expr < expr
    (72) expr -> . expr LE expr
    (73) expr -> . expr NE expr
    (74) expr -> . expr EQ expr
    (75) expr -> . expr AND expr
    (76) expr -> . expr OR expr
    (77) expr -> . IDENT [ expr ] = expr
    (78) expr -> . IDENT MODASSIGN expr
    (79) expr -> . IDENT DIVASSIGN expr
    (80) expr -> . IDENT MULASSIGN expr
    (81) expr -> . IDENT SUBASSIGN expr
    (82) expr -> . IDENT ADDASSIGN expr
    (83) expr -> . IDENT = expr
    BREAK           shift and go to state 48
    RETURN          shift and go to state 50
    FOR             shift and go to state 52
    WHILE           shift and go to state 54
    IF              shift and go to state 55
    {               shift and go to state 30
    ;               shift and go to state 49
    NEW             shift and go to state 56
    STRING_LIT      shift and go to state 57
    CHAR_LIT        shift and go to state 58
    FLOAT_LIT       shift and go to state 59
    INT_LIT         shift and go to state 60
    FALSE           shift and go to state 61
    TRUE            shift and go to state 62
    BOOL_LIT        shift and go to state 63
    IDENT           shift and go to state 64
    DEC             shift and go to state 65
    INC             shift and go to state 66
    (               shift and go to state 53
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    !               shift and go to state 69

    expr                           shift and go to state 51
    stmt                           shift and go to state 163
    break_stmt                     shift and go to state 41
    return_stmt                    shift and go to state 42
    for_stmt                       shift and go to state 43
    while_stmt                     shift and go to state 44
    if_stmt                        shift and go to state 45
    compound_stmt                  shift and go to state 46
    expr_stmt                      shift and go to state 47

state 163

    (38) for_stmt -> FOR ( expr ; expr ; expr ) stmt .
    }               reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    BREAK           reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    RETURN          reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    FOR             reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    WHILE           reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    IF              reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    {               reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    ;               reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    NEW             reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    STRING_LIT      reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    CHAR_LIT        reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    FLOAT_LIT       reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    INT_LIT         reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    FALSE           reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    TRUE            reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    BOOL_LIT        reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    IDENT           reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    DEC             reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    INC             reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    (               reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    PLUS            reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    MINUS           reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    !               reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    ELSE            reduce using rule 38 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
