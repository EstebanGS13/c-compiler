Grammar:

Rule 0     S' -> program
Rule 1     program -> decl_list
Rule 2     decl_list -> decl
Rule 3     decl_list -> decl_list decl
Rule 4     decl -> fun_decl
Rule 5     decl -> var_decl
Rule 6     var_decl -> type_spec IDENT [ ] = expr ;
Rule 7     var_decl -> type_spec IDENT [ ] ;
Rule 8     var_decl -> type_spec IDENT = expr ;
Rule 9     var_decl -> type_spec IDENT ;
Rule 10    type_spec -> CHAR
Rule 11    type_spec -> FLOAT
Rule 12    type_spec -> INT
Rule 13    type_spec -> BOOL
Rule 14    type_spec -> VOID
Rule 15    fun_decl -> type_spec IDENT ( params ) compound_stmt  [precedence=left, level=10]
Rule 16    params -> VOID
Rule 17    params -> param_list
Rule 18    param_list -> param
Rule 19    param_list -> param_list , param  [precedence=left, level=1]
Rule 20    param -> type_spec IDENT [ ]  [precedence=left, level=10]
Rule 21    param -> type_spec IDENT
Rule 22    compound_stmt -> { local_decls stmt_list }
Rule 23    local_decls -> empty
Rule 24    local_decls -> local_decls local_decl
Rule 25    local_decl -> type_spec IDENT [ ] = expr ;
Rule 26    local_decl -> type_spec IDENT [ ] ;
Rule 27    local_decl -> type_spec IDENT = expr ;
Rule 28    local_decl -> type_spec IDENT ;
Rule 29    stmt_list -> empty
Rule 30    stmt_list -> stmt_list stmt
Rule 31    stmt -> break_stmt
Rule 32    stmt -> return_stmt
Rule 33    stmt -> for_stmt
Rule 34    stmt -> while_stmt
Rule 35    stmt -> if_stmt
Rule 36    stmt -> compound_stmt
Rule 37    stmt -> expr_stmt
Rule 38    expr_stmt -> ;
Rule 39    expr_stmt -> expr ;
Rule 40    while_stmt -> WHILE ( expr ) stmt  [precedence=left, level=10]
Rule 41    for_stmt -> FOR ( expr ; expr ; expr ) stmt  [precedence=left, level=10]
Rule 42    if_stmt -> IF ( expr ) stmt ELSE stmt
Rule 43    if_stmt -> IF ( expr ) stmt  [precedence=left, level=10]
Rule 44    return_stmt -> RETURN expr ;
Rule 45    return_stmt -> RETURN ;
Rule 46    break_stmt -> BREAK ;
Rule 47    expr -> NEW type_spec [ expr ]  [precedence=left, level=10]
Rule 48    expr -> STRING_LIT
Rule 49    expr -> CHAR_LIT
Rule 50    expr -> FLOAT_LIT
Rule 51    expr -> INT_LIT
Rule 52    expr -> FALSE
Rule 53    expr -> TRUE
Rule 54    expr -> BOOL_LIT
Rule 55    expr -> IDENT . SIZE
Rule 56    expr -> IDENT ( args )  [precedence=left, level=10]
Rule 57    expr -> IDENT [ expr ]  [precedence=left, level=10]
Rule 58    expr -> IDENT DEC  [precedence=left, level=10]
Rule 59    expr -> IDENT INC  [precedence=left, level=10]
Rule 60    expr -> DEC IDENT  [precedence=right, level=9]
Rule 61    expr -> INC IDENT  [precedence=right, level=9]
Rule 62    expr -> IDENT
Rule 63    expr -> ( expr )  [precedence=left, level=10]
Rule 64    expr -> PLUS expr  [precedence=right, level=9]
Rule 65    expr -> MINUS expr  [precedence=right, level=9]
Rule 66    expr -> ! expr  [precedence=right, level=9]
Rule 67    expr -> expr MOD expr  [precedence=left, level=8]
Rule 68    expr -> expr DIVIDE expr  [precedence=left, level=8]
Rule 69    expr -> expr TIMES expr  [precedence=left, level=8]
Rule 70    expr -> expr - expr  [precedence=left, level=7]
Rule 71    expr -> expr + expr  [precedence=left, level=7]
Rule 72    expr -> expr > expr  [precedence=left, level=6]
Rule 73    expr -> expr GE expr  [precedence=left, level=6]
Rule 74    expr -> expr < expr  [precedence=left, level=6]
Rule 75    expr -> expr LE expr  [precedence=left, level=6]
Rule 76    expr -> expr NE expr  [precedence=left, level=5]
Rule 77    expr -> expr EQ expr  [precedence=left, level=5]
Rule 78    expr -> expr AND expr  [precedence=left, level=4]
Rule 79    expr -> expr OR expr  [precedence=left, level=3]
Rule 80    expr -> IDENT [ expr ] = expr  [precedence=right, level=2]
Rule 81    expr -> IDENT MODASSIGN expr  [precedence=right, level=2]
Rule 82    expr -> IDENT DIVASSIGN expr  [precedence=right, level=2]
Rule 83    expr -> IDENT MULASSIGN expr  [precedence=right, level=2]
Rule 84    expr -> IDENT SUBASSIGN expr  [precedence=right, level=2]
Rule 85    expr -> IDENT ADDASSIGN expr  [precedence=right, level=2]
Rule 86    expr -> IDENT = expr  [precedence=right, level=2]
Rule 87    arg_list -> expr
Rule 88    arg_list -> arg_list , expr  [precedence=left, level=1]
Rule 89    args -> empty
Rule 90    args -> arg_list
Rule 91    empty -> <empty>

Terminals, with rules where they appear:

!                    : 66
(                    : 15 40 41 42 43 56 63
)                    : 15 40 41 42 43 56 63
+                    : 71
,                    : 19 88
-                    : 70
.                    : 55
;                    : 6 7 8 9 25 26 27 28 38 39 41 41 44 45 46
<                    : 74
=                    : 6 8 25 27 80 86
>                    : 72
ADDASSIGN            : 85
AND                  : 78
BOOL                 : 13
BOOL_LIT             : 54
BREAK                : 46
CHAR                 : 10
CHAR_LIT             : 49
DEC                  : 58 60
DIVASSIGN            : 82
DIVIDE               : 68
ELSE                 : 42
EQ                   : 77
FALSE                : 52
FLOAT                : 11
FLOAT_LIT            : 50
FOR                  : 41
GE                   : 73
IDENT                : 6 7 8 9 15 20 21 25 26 27 28 55 56 57 58 59 60 61 62 80 81 82 83 84 85 86
IF                   : 42 43
INC                  : 59 61
INT                  : 12
INT_LIT              : 51
LE                   : 75
MINUS                : 65
MOD                  : 67
MODASSIGN            : 81
MULASSIGN            : 83
NE                   : 76
NEW                  : 47
OR                   : 79
PLUS                 : 64
RETURN               : 44 45
SIZE                 : 55
STRING_LIT           : 48
SUBASSIGN            : 84
TIMES                : 69
TRUE                 : 53
VOID                 : 14 16
WHILE                : 40
[                    : 6 7 20 25 26 47 57 80
]                    : 6 7 20 25 26 47 57 80
error                : 
{                    : 22
}                    : 22

Nonterminals, with rules where they appear:

arg_list             : 88 90
args                 : 56
break_stmt           : 31
compound_stmt        : 15 36
decl                 : 2 3
decl_list            : 1 3
empty                : 23 29 89
expr                 : 6 8 25 27 39 40 41 41 41 42 43 44 47 57 63 64 65 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 80 81 82 83 84 85 86 87 88
expr_stmt            : 37
for_stmt             : 33
fun_decl             : 4
if_stmt              : 35
local_decl           : 24
local_decls          : 22 24
param                : 18 19
param_list           : 17 19
params               : 15
program              : 0
return_stmt          : 32
stmt                 : 30 40 41 42 42 43
stmt_list            : 22 30
type_spec            : 6 7 8 9 15 20 21 25 26 27 28 47
var_decl             : 5
while_stmt           : 34


state 0

    (0) S' -> . program
    (1) program -> . decl_list
    (2) decl_list -> . decl
    (3) decl_list -> . decl_list decl
    (4) decl -> . fun_decl
    (5) decl -> . var_decl
    (15) fun_decl -> . type_spec IDENT ( params ) compound_stmt
    (6) var_decl -> . type_spec IDENT [ ] = expr ;
    (7) var_decl -> . type_spec IDENT [ ] ;
    (8) var_decl -> . type_spec IDENT = expr ;
    (9) var_decl -> . type_spec IDENT ;
    (10) type_spec -> . CHAR
    (11) type_spec -> . FLOAT
    (12) type_spec -> . INT
    (13) type_spec -> . BOOL
    (14) type_spec -> . VOID
    CHAR            shift and go to state 7
    FLOAT           shift and go to state 8
    INT             shift and go to state 9
    BOOL            shift and go to state 10
    VOID            shift and go to state 11

    program                        shift and go to state 1
    decl_list                      shift and go to state 2
    decl                           shift and go to state 3
    fun_decl                       shift and go to state 4
    var_decl                       shift and go to state 5
    type_spec                      shift and go to state 6

state 1

    (0) S' -> program .


state 2

    (1) program -> decl_list .
    (3) decl_list -> decl_list . decl
    (4) decl -> . fun_decl
    (5) decl -> . var_decl
    (15) fun_decl -> . type_spec IDENT ( params ) compound_stmt
    (6) var_decl -> . type_spec IDENT [ ] = expr ;
    (7) var_decl -> . type_spec IDENT [ ] ;
    (8) var_decl -> . type_spec IDENT = expr ;
    (9) var_decl -> . type_spec IDENT ;
    (10) type_spec -> . CHAR
    (11) type_spec -> . FLOAT
    (12) type_spec -> . INT
    (13) type_spec -> . BOOL
    (14) type_spec -> . VOID
    $end            reduce using rule 1 (program -> decl_list .)
    CHAR            shift and go to state 7
    FLOAT           shift and go to state 8
    INT             shift and go to state 9
    BOOL            shift and go to state 10
    VOID            shift and go to state 11

    decl                           shift and go to state 12
    fun_decl                       shift and go to state 4
    var_decl                       shift and go to state 5
    type_spec                      shift and go to state 6

state 3

    (2) decl_list -> decl .
    CHAR            reduce using rule 2 (decl_list -> decl .)
    FLOAT           reduce using rule 2 (decl_list -> decl .)
    INT             reduce using rule 2 (decl_list -> decl .)
    BOOL            reduce using rule 2 (decl_list -> decl .)
    VOID            reduce using rule 2 (decl_list -> decl .)
    $end            reduce using rule 2 (decl_list -> decl .)


state 4

    (4) decl -> fun_decl .
    CHAR            reduce using rule 4 (decl -> fun_decl .)
    FLOAT           reduce using rule 4 (decl -> fun_decl .)
    INT             reduce using rule 4 (decl -> fun_decl .)
    BOOL            reduce using rule 4 (decl -> fun_decl .)
    VOID            reduce using rule 4 (decl -> fun_decl .)
    $end            reduce using rule 4 (decl -> fun_decl .)


state 5

    (5) decl -> var_decl .
    CHAR            reduce using rule 5 (decl -> var_decl .)
    FLOAT           reduce using rule 5 (decl -> var_decl .)
    INT             reduce using rule 5 (decl -> var_decl .)
    BOOL            reduce using rule 5 (decl -> var_decl .)
    VOID            reduce using rule 5 (decl -> var_decl .)
    $end            reduce using rule 5 (decl -> var_decl .)


state 6

    (15) fun_decl -> type_spec . IDENT ( params ) compound_stmt
    (6) var_decl -> type_spec . IDENT [ ] = expr ;
    (7) var_decl -> type_spec . IDENT [ ] ;
    (8) var_decl -> type_spec . IDENT = expr ;
    (9) var_decl -> type_spec . IDENT ;
    IDENT           shift and go to state 13


state 7

    (10) type_spec -> CHAR .
    IDENT           reduce using rule 10 (type_spec -> CHAR .)
    [               reduce using rule 10 (type_spec -> CHAR .)


state 8

    (11) type_spec -> FLOAT .
    IDENT           reduce using rule 11 (type_spec -> FLOAT .)
    [               reduce using rule 11 (type_spec -> FLOAT .)


state 9

    (12) type_spec -> INT .
    IDENT           reduce using rule 12 (type_spec -> INT .)
    [               reduce using rule 12 (type_spec -> INT .)


state 10

    (13) type_spec -> BOOL .
    IDENT           reduce using rule 13 (type_spec -> BOOL .)
    [               reduce using rule 13 (type_spec -> BOOL .)


state 11

    (14) type_spec -> VOID .
    IDENT           reduce using rule 14 (type_spec -> VOID .)
    [               reduce using rule 14 (type_spec -> VOID .)


state 12

    (3) decl_list -> decl_list decl .
    CHAR            reduce using rule 3 (decl_list -> decl_list decl .)
    FLOAT           reduce using rule 3 (decl_list -> decl_list decl .)
    INT             reduce using rule 3 (decl_list -> decl_list decl .)
    BOOL            reduce using rule 3 (decl_list -> decl_list decl .)
    VOID            reduce using rule 3 (decl_list -> decl_list decl .)
    $end            reduce using rule 3 (decl_list -> decl_list decl .)


state 13

    (15) fun_decl -> type_spec IDENT . ( params ) compound_stmt
    (6) var_decl -> type_spec IDENT . [ ] = expr ;
    (7) var_decl -> type_spec IDENT . [ ] ;
    (8) var_decl -> type_spec IDENT . = expr ;
    (9) var_decl -> type_spec IDENT . ;
    (               shift and go to state 14
    [               shift and go to state 15
    =               shift and go to state 16
    ;               shift and go to state 17


state 14

    (15) fun_decl -> type_spec IDENT ( . params ) compound_stmt
    (16) params -> . VOID
    (17) params -> . param_list
    (18) param_list -> . param
    (19) param_list -> . param_list , param
    (20) param -> . type_spec IDENT [ ]
    (21) param -> . type_spec IDENT
    (10) type_spec -> . CHAR
    (11) type_spec -> . FLOAT
    (12) type_spec -> . INT
    (13) type_spec -> . BOOL
    (14) type_spec -> . VOID
    VOID            shift and go to state 20
    CHAR            shift and go to state 7
    FLOAT           shift and go to state 8
    INT             shift and go to state 9
    BOOL            shift and go to state 10

    type_spec                      shift and go to state 18
    params                         shift and go to state 19
    param_list                     shift and go to state 21
    param                          shift and go to state 22

state 15

    (6) var_decl -> type_spec IDENT [ . ] = expr ;
    (7) var_decl -> type_spec IDENT [ . ] ;
    ]               shift and go to state 23


state 16

    (8) var_decl -> type_spec IDENT = . expr ;
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 25

state 17

    (9) var_decl -> type_spec IDENT ; .
    CHAR            reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    FLOAT           reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    INT             reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    BOOL            reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    VOID            reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    $end            reduce using rule 9 (var_decl -> type_spec IDENT ; .)


state 18

    (20) param -> type_spec . IDENT [ ]
    (21) param -> type_spec . IDENT
    IDENT           shift and go to state 40


state 19

    (15) fun_decl -> type_spec IDENT ( params . ) compound_stmt
    )               shift and go to state 41


state 20

    (16) params -> VOID .
    (14) type_spec -> VOID .
    )               reduce using rule 16 (params -> VOID .)
    IDENT           reduce using rule 14 (type_spec -> VOID .)


state 21

    (17) params -> param_list .
    (19) param_list -> param_list . , param
    )               reduce using rule 17 (params -> param_list .)
    ,               shift and go to state 42


state 22

    (18) param_list -> param .
    ,               reduce using rule 18 (param_list -> param .)
    )               reduce using rule 18 (param_list -> param .)


state 23

    (6) var_decl -> type_spec IDENT [ ] . = expr ;
    (7) var_decl -> type_spec IDENT [ ] . ;
    =               shift and go to state 43
    ;               shift and go to state 44


state 24

    (55) expr -> IDENT . . SIZE
    (56) expr -> IDENT . ( args )
    (57) expr -> IDENT . [ expr ]
    (58) expr -> IDENT . DEC
    (59) expr -> IDENT . INC
    (62) expr -> IDENT .
    (80) expr -> IDENT . [ expr ] = expr
    (81) expr -> IDENT . MODASSIGN expr
    (82) expr -> IDENT . DIVASSIGN expr
    (83) expr -> IDENT . MULASSIGN expr
    (84) expr -> IDENT . SUBASSIGN expr
    (85) expr -> IDENT . ADDASSIGN expr
    (86) expr -> IDENT . = expr
    .               shift and go to state 45
    (               shift and go to state 46
    [               shift and go to state 47
    DEC             shift and go to state 48
    INC             shift and go to state 49
    ;               reduce using rule 62 (expr -> IDENT .)
    MOD             reduce using rule 62 (expr -> IDENT .)
    DIVIDE          reduce using rule 62 (expr -> IDENT .)
    TIMES           reduce using rule 62 (expr -> IDENT .)
    -               reduce using rule 62 (expr -> IDENT .)
    +               reduce using rule 62 (expr -> IDENT .)
    >               reduce using rule 62 (expr -> IDENT .)
    GE              reduce using rule 62 (expr -> IDENT .)
    <               reduce using rule 62 (expr -> IDENT .)
    LE              reduce using rule 62 (expr -> IDENT .)
    NE              reduce using rule 62 (expr -> IDENT .)
    EQ              reduce using rule 62 (expr -> IDENT .)
    AND             reduce using rule 62 (expr -> IDENT .)
    OR              reduce using rule 62 (expr -> IDENT .)
    )               reduce using rule 62 (expr -> IDENT .)
    ,               reduce using rule 62 (expr -> IDENT .)
    ]               reduce using rule 62 (expr -> IDENT .)
    MODASSIGN       shift and go to state 51
    DIVASSIGN       shift and go to state 52
    MULASSIGN       shift and go to state 53
    SUBASSIGN       shift and go to state 54
    ADDASSIGN       shift and go to state 55
    =               shift and go to state 50


state 25

    (8) var_decl -> type_spec IDENT = expr . ;
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               shift and go to state 56
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 26

    (47) expr -> NEW . type_spec [ expr ]
    (10) type_spec -> . CHAR
    (11) type_spec -> . FLOAT
    (12) type_spec -> . INT
    (13) type_spec -> . BOOL
    (14) type_spec -> . VOID
    CHAR            shift and go to state 7
    FLOAT           shift and go to state 8
    INT             shift and go to state 9
    BOOL            shift and go to state 10
    VOID            shift and go to state 11

    type_spec                      shift and go to state 70

state 27

    (48) expr -> STRING_LIT .
    ;               reduce using rule 48 (expr -> STRING_LIT .)
    MOD             reduce using rule 48 (expr -> STRING_LIT .)
    DIVIDE          reduce using rule 48 (expr -> STRING_LIT .)
    TIMES           reduce using rule 48 (expr -> STRING_LIT .)
    -               reduce using rule 48 (expr -> STRING_LIT .)
    +               reduce using rule 48 (expr -> STRING_LIT .)
    >               reduce using rule 48 (expr -> STRING_LIT .)
    GE              reduce using rule 48 (expr -> STRING_LIT .)
    <               reduce using rule 48 (expr -> STRING_LIT .)
    LE              reduce using rule 48 (expr -> STRING_LIT .)
    NE              reduce using rule 48 (expr -> STRING_LIT .)
    EQ              reduce using rule 48 (expr -> STRING_LIT .)
    AND             reduce using rule 48 (expr -> STRING_LIT .)
    OR              reduce using rule 48 (expr -> STRING_LIT .)
    )               reduce using rule 48 (expr -> STRING_LIT .)
    ,               reduce using rule 48 (expr -> STRING_LIT .)
    ]               reduce using rule 48 (expr -> STRING_LIT .)


state 28

    (49) expr -> CHAR_LIT .
    ;               reduce using rule 49 (expr -> CHAR_LIT .)
    MOD             reduce using rule 49 (expr -> CHAR_LIT .)
    DIVIDE          reduce using rule 49 (expr -> CHAR_LIT .)
    TIMES           reduce using rule 49 (expr -> CHAR_LIT .)
    -               reduce using rule 49 (expr -> CHAR_LIT .)
    +               reduce using rule 49 (expr -> CHAR_LIT .)
    >               reduce using rule 49 (expr -> CHAR_LIT .)
    GE              reduce using rule 49 (expr -> CHAR_LIT .)
    <               reduce using rule 49 (expr -> CHAR_LIT .)
    LE              reduce using rule 49 (expr -> CHAR_LIT .)
    NE              reduce using rule 49 (expr -> CHAR_LIT .)
    EQ              reduce using rule 49 (expr -> CHAR_LIT .)
    AND             reduce using rule 49 (expr -> CHAR_LIT .)
    OR              reduce using rule 49 (expr -> CHAR_LIT .)
    )               reduce using rule 49 (expr -> CHAR_LIT .)
    ,               reduce using rule 49 (expr -> CHAR_LIT .)
    ]               reduce using rule 49 (expr -> CHAR_LIT .)


state 29

    (50) expr -> FLOAT_LIT .
    ;               reduce using rule 50 (expr -> FLOAT_LIT .)
    MOD             reduce using rule 50 (expr -> FLOAT_LIT .)
    DIVIDE          reduce using rule 50 (expr -> FLOAT_LIT .)
    TIMES           reduce using rule 50 (expr -> FLOAT_LIT .)
    -               reduce using rule 50 (expr -> FLOAT_LIT .)
    +               reduce using rule 50 (expr -> FLOAT_LIT .)
    >               reduce using rule 50 (expr -> FLOAT_LIT .)
    GE              reduce using rule 50 (expr -> FLOAT_LIT .)
    <               reduce using rule 50 (expr -> FLOAT_LIT .)
    LE              reduce using rule 50 (expr -> FLOAT_LIT .)
    NE              reduce using rule 50 (expr -> FLOAT_LIT .)
    EQ              reduce using rule 50 (expr -> FLOAT_LIT .)
    AND             reduce using rule 50 (expr -> FLOAT_LIT .)
    OR              reduce using rule 50 (expr -> FLOAT_LIT .)
    )               reduce using rule 50 (expr -> FLOAT_LIT .)
    ,               reduce using rule 50 (expr -> FLOAT_LIT .)
    ]               reduce using rule 50 (expr -> FLOAT_LIT .)


state 30

    (51) expr -> INT_LIT .
    ;               reduce using rule 51 (expr -> INT_LIT .)
    MOD             reduce using rule 51 (expr -> INT_LIT .)
    DIVIDE          reduce using rule 51 (expr -> INT_LIT .)
    TIMES           reduce using rule 51 (expr -> INT_LIT .)
    -               reduce using rule 51 (expr -> INT_LIT .)
    +               reduce using rule 51 (expr -> INT_LIT .)
    >               reduce using rule 51 (expr -> INT_LIT .)
    GE              reduce using rule 51 (expr -> INT_LIT .)
    <               reduce using rule 51 (expr -> INT_LIT .)
    LE              reduce using rule 51 (expr -> INT_LIT .)
    NE              reduce using rule 51 (expr -> INT_LIT .)
    EQ              reduce using rule 51 (expr -> INT_LIT .)
    AND             reduce using rule 51 (expr -> INT_LIT .)
    OR              reduce using rule 51 (expr -> INT_LIT .)
    )               reduce using rule 51 (expr -> INT_LIT .)
    ,               reduce using rule 51 (expr -> INT_LIT .)
    ]               reduce using rule 51 (expr -> INT_LIT .)


state 31

    (52) expr -> FALSE .
    ;               reduce using rule 52 (expr -> FALSE .)
    MOD             reduce using rule 52 (expr -> FALSE .)
    DIVIDE          reduce using rule 52 (expr -> FALSE .)
    TIMES           reduce using rule 52 (expr -> FALSE .)
    -               reduce using rule 52 (expr -> FALSE .)
    +               reduce using rule 52 (expr -> FALSE .)
    >               reduce using rule 52 (expr -> FALSE .)
    GE              reduce using rule 52 (expr -> FALSE .)
    <               reduce using rule 52 (expr -> FALSE .)
    LE              reduce using rule 52 (expr -> FALSE .)
    NE              reduce using rule 52 (expr -> FALSE .)
    EQ              reduce using rule 52 (expr -> FALSE .)
    AND             reduce using rule 52 (expr -> FALSE .)
    OR              reduce using rule 52 (expr -> FALSE .)
    )               reduce using rule 52 (expr -> FALSE .)
    ,               reduce using rule 52 (expr -> FALSE .)
    ]               reduce using rule 52 (expr -> FALSE .)


state 32

    (53) expr -> TRUE .
    ;               reduce using rule 53 (expr -> TRUE .)
    MOD             reduce using rule 53 (expr -> TRUE .)
    DIVIDE          reduce using rule 53 (expr -> TRUE .)
    TIMES           reduce using rule 53 (expr -> TRUE .)
    -               reduce using rule 53 (expr -> TRUE .)
    +               reduce using rule 53 (expr -> TRUE .)
    >               reduce using rule 53 (expr -> TRUE .)
    GE              reduce using rule 53 (expr -> TRUE .)
    <               reduce using rule 53 (expr -> TRUE .)
    LE              reduce using rule 53 (expr -> TRUE .)
    NE              reduce using rule 53 (expr -> TRUE .)
    EQ              reduce using rule 53 (expr -> TRUE .)
    AND             reduce using rule 53 (expr -> TRUE .)
    OR              reduce using rule 53 (expr -> TRUE .)
    )               reduce using rule 53 (expr -> TRUE .)
    ,               reduce using rule 53 (expr -> TRUE .)
    ]               reduce using rule 53 (expr -> TRUE .)


state 33

    (54) expr -> BOOL_LIT .
    ;               reduce using rule 54 (expr -> BOOL_LIT .)
    MOD             reduce using rule 54 (expr -> BOOL_LIT .)
    DIVIDE          reduce using rule 54 (expr -> BOOL_LIT .)
    TIMES           reduce using rule 54 (expr -> BOOL_LIT .)
    -               reduce using rule 54 (expr -> BOOL_LIT .)
    +               reduce using rule 54 (expr -> BOOL_LIT .)
    >               reduce using rule 54 (expr -> BOOL_LIT .)
    GE              reduce using rule 54 (expr -> BOOL_LIT .)
    <               reduce using rule 54 (expr -> BOOL_LIT .)
    LE              reduce using rule 54 (expr -> BOOL_LIT .)
    NE              reduce using rule 54 (expr -> BOOL_LIT .)
    EQ              reduce using rule 54 (expr -> BOOL_LIT .)
    AND             reduce using rule 54 (expr -> BOOL_LIT .)
    OR              reduce using rule 54 (expr -> BOOL_LIT .)
    )               reduce using rule 54 (expr -> BOOL_LIT .)
    ,               reduce using rule 54 (expr -> BOOL_LIT .)
    ]               reduce using rule 54 (expr -> BOOL_LIT .)


state 34

    (63) expr -> ( . expr )
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 71

state 35

    (60) expr -> DEC . IDENT
    IDENT           shift and go to state 72


state 36

    (61) expr -> INC . IDENT
    IDENT           shift and go to state 73


state 37

    (64) expr -> PLUS . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 74

state 38

    (65) expr -> MINUS . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 75

state 39

    (66) expr -> ! . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 76

state 40

    (20) param -> type_spec IDENT . [ ]
    (21) param -> type_spec IDENT .
    [               shift and go to state 77
    ,               reduce using rule 21 (param -> type_spec IDENT .)
    )               reduce using rule 21 (param -> type_spec IDENT .)


state 41

    (15) fun_decl -> type_spec IDENT ( params ) . compound_stmt
    (22) compound_stmt -> . { local_decls stmt_list }
    {               shift and go to state 79

    compound_stmt                  shift and go to state 78

state 42

    (19) param_list -> param_list , . param
    (20) param -> . type_spec IDENT [ ]
    (21) param -> . type_spec IDENT
    (10) type_spec -> . CHAR
    (11) type_spec -> . FLOAT
    (12) type_spec -> . INT
    (13) type_spec -> . BOOL
    (14) type_spec -> . VOID
    CHAR            shift and go to state 7
    FLOAT           shift and go to state 8
    INT             shift and go to state 9
    BOOL            shift and go to state 10
    VOID            shift and go to state 11

    param                          shift and go to state 80
    type_spec                      shift and go to state 18

state 43

    (6) var_decl -> type_spec IDENT [ ] = . expr ;
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 81

state 44

    (7) var_decl -> type_spec IDENT [ ] ; .
    CHAR            reduce using rule 7 (var_decl -> type_spec IDENT [ ] ; .)
    FLOAT           reduce using rule 7 (var_decl -> type_spec IDENT [ ] ; .)
    INT             reduce using rule 7 (var_decl -> type_spec IDENT [ ] ; .)
    BOOL            reduce using rule 7 (var_decl -> type_spec IDENT [ ] ; .)
    VOID            reduce using rule 7 (var_decl -> type_spec IDENT [ ] ; .)
    $end            reduce using rule 7 (var_decl -> type_spec IDENT [ ] ; .)


state 45

    (55) expr -> IDENT . . SIZE
    SIZE            shift and go to state 82


state 46

    (56) expr -> IDENT ( . args )
    (89) args -> . empty
    (90) args -> . arg_list
    (91) empty -> .
    (87) arg_list -> . expr
    (88) arg_list -> . arg_list , expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    )               reduce using rule 91 (empty -> .)
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    args                           shift and go to state 83
    empty                          shift and go to state 84
    arg_list                       shift and go to state 85
    expr                           shift and go to state 86

state 47

    (57) expr -> IDENT [ . expr ]
    (80) expr -> IDENT [ . expr ] = expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 87

state 48

    (58) expr -> IDENT DEC .
    ;               reduce using rule 58 (expr -> IDENT DEC .)
    MOD             reduce using rule 58 (expr -> IDENT DEC .)
    DIVIDE          reduce using rule 58 (expr -> IDENT DEC .)
    TIMES           reduce using rule 58 (expr -> IDENT DEC .)
    -               reduce using rule 58 (expr -> IDENT DEC .)
    +               reduce using rule 58 (expr -> IDENT DEC .)
    >               reduce using rule 58 (expr -> IDENT DEC .)
    GE              reduce using rule 58 (expr -> IDENT DEC .)
    <               reduce using rule 58 (expr -> IDENT DEC .)
    LE              reduce using rule 58 (expr -> IDENT DEC .)
    NE              reduce using rule 58 (expr -> IDENT DEC .)
    EQ              reduce using rule 58 (expr -> IDENT DEC .)
    AND             reduce using rule 58 (expr -> IDENT DEC .)
    OR              reduce using rule 58 (expr -> IDENT DEC .)
    )               reduce using rule 58 (expr -> IDENT DEC .)
    ,               reduce using rule 58 (expr -> IDENT DEC .)
    ]               reduce using rule 58 (expr -> IDENT DEC .)


state 49

    (59) expr -> IDENT INC .
    ;               reduce using rule 59 (expr -> IDENT INC .)
    MOD             reduce using rule 59 (expr -> IDENT INC .)
    DIVIDE          reduce using rule 59 (expr -> IDENT INC .)
    TIMES           reduce using rule 59 (expr -> IDENT INC .)
    -               reduce using rule 59 (expr -> IDENT INC .)
    +               reduce using rule 59 (expr -> IDENT INC .)
    >               reduce using rule 59 (expr -> IDENT INC .)
    GE              reduce using rule 59 (expr -> IDENT INC .)
    <               reduce using rule 59 (expr -> IDENT INC .)
    LE              reduce using rule 59 (expr -> IDENT INC .)
    NE              reduce using rule 59 (expr -> IDENT INC .)
    EQ              reduce using rule 59 (expr -> IDENT INC .)
    AND             reduce using rule 59 (expr -> IDENT INC .)
    OR              reduce using rule 59 (expr -> IDENT INC .)
    )               reduce using rule 59 (expr -> IDENT INC .)
    ,               reduce using rule 59 (expr -> IDENT INC .)
    ]               reduce using rule 59 (expr -> IDENT INC .)


state 50

    (86) expr -> IDENT = . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 88

state 51

    (81) expr -> IDENT MODASSIGN . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 89

state 52

    (82) expr -> IDENT DIVASSIGN . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 90

state 53

    (83) expr -> IDENT MULASSIGN . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 91

state 54

    (84) expr -> IDENT SUBASSIGN . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 92

state 55

    (85) expr -> IDENT ADDASSIGN . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 93

state 56

    (8) var_decl -> type_spec IDENT = expr ; .
    CHAR            reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    FLOAT           reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    INT             reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    BOOL            reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    VOID            reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    $end            reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)


state 57

    (67) expr -> expr MOD . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 94

state 58

    (68) expr -> expr DIVIDE . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 95

state 59

    (69) expr -> expr TIMES . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 96

state 60

    (70) expr -> expr - . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 97

state 61

    (71) expr -> expr + . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 98

state 62

    (72) expr -> expr > . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 99

state 63

    (73) expr -> expr GE . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 100

state 64

    (74) expr -> expr < . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 101

state 65

    (75) expr -> expr LE . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 102

state 66

    (76) expr -> expr NE . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 103

state 67

    (77) expr -> expr EQ . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 104

state 68

    (78) expr -> expr AND . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 105

state 69

    (79) expr -> expr OR . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 106

state 70

    (47) expr -> NEW type_spec . [ expr ]
    [               shift and go to state 107


state 71

    (63) expr -> ( expr . )
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    )               shift and go to state 108
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 72

    (60) expr -> DEC IDENT .
    ;               reduce using rule 60 (expr -> DEC IDENT .)
    MOD             reduce using rule 60 (expr -> DEC IDENT .)
    DIVIDE          reduce using rule 60 (expr -> DEC IDENT .)
    TIMES           reduce using rule 60 (expr -> DEC IDENT .)
    -               reduce using rule 60 (expr -> DEC IDENT .)
    +               reduce using rule 60 (expr -> DEC IDENT .)
    >               reduce using rule 60 (expr -> DEC IDENT .)
    GE              reduce using rule 60 (expr -> DEC IDENT .)
    <               reduce using rule 60 (expr -> DEC IDENT .)
    LE              reduce using rule 60 (expr -> DEC IDENT .)
    NE              reduce using rule 60 (expr -> DEC IDENT .)
    EQ              reduce using rule 60 (expr -> DEC IDENT .)
    AND             reduce using rule 60 (expr -> DEC IDENT .)
    OR              reduce using rule 60 (expr -> DEC IDENT .)
    )               reduce using rule 60 (expr -> DEC IDENT .)
    ,               reduce using rule 60 (expr -> DEC IDENT .)
    ]               reduce using rule 60 (expr -> DEC IDENT .)


state 73

    (61) expr -> INC IDENT .
    ;               reduce using rule 61 (expr -> INC IDENT .)
    MOD             reduce using rule 61 (expr -> INC IDENT .)
    DIVIDE          reduce using rule 61 (expr -> INC IDENT .)
    TIMES           reduce using rule 61 (expr -> INC IDENT .)
    -               reduce using rule 61 (expr -> INC IDENT .)
    +               reduce using rule 61 (expr -> INC IDENT .)
    >               reduce using rule 61 (expr -> INC IDENT .)
    GE              reduce using rule 61 (expr -> INC IDENT .)
    <               reduce using rule 61 (expr -> INC IDENT .)
    LE              reduce using rule 61 (expr -> INC IDENT .)
    NE              reduce using rule 61 (expr -> INC IDENT .)
    EQ              reduce using rule 61 (expr -> INC IDENT .)
    AND             reduce using rule 61 (expr -> INC IDENT .)
    OR              reduce using rule 61 (expr -> INC IDENT .)
    )               reduce using rule 61 (expr -> INC IDENT .)
    ,               reduce using rule 61 (expr -> INC IDENT .)
    ]               reduce using rule 61 (expr -> INC IDENT .)


state 74

    (64) expr -> PLUS expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 64 (expr -> PLUS expr .)
    MOD             reduce using rule 64 (expr -> PLUS expr .)
    DIVIDE          reduce using rule 64 (expr -> PLUS expr .)
    TIMES           reduce using rule 64 (expr -> PLUS expr .)
    -               reduce using rule 64 (expr -> PLUS expr .)
    +               reduce using rule 64 (expr -> PLUS expr .)
    >               reduce using rule 64 (expr -> PLUS expr .)
    GE              reduce using rule 64 (expr -> PLUS expr .)
    <               reduce using rule 64 (expr -> PLUS expr .)
    LE              reduce using rule 64 (expr -> PLUS expr .)
    NE              reduce using rule 64 (expr -> PLUS expr .)
    EQ              reduce using rule 64 (expr -> PLUS expr .)
    AND             reduce using rule 64 (expr -> PLUS expr .)
    OR              reduce using rule 64 (expr -> PLUS expr .)
    )               reduce using rule 64 (expr -> PLUS expr .)
    ,               reduce using rule 64 (expr -> PLUS expr .)
    ]               reduce using rule 64 (expr -> PLUS expr .)


state 75

    (65) expr -> MINUS expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 65 (expr -> MINUS expr .)
    MOD             reduce using rule 65 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 65 (expr -> MINUS expr .)
    TIMES           reduce using rule 65 (expr -> MINUS expr .)
    -               reduce using rule 65 (expr -> MINUS expr .)
    +               reduce using rule 65 (expr -> MINUS expr .)
    >               reduce using rule 65 (expr -> MINUS expr .)
    GE              reduce using rule 65 (expr -> MINUS expr .)
    <               reduce using rule 65 (expr -> MINUS expr .)
    LE              reduce using rule 65 (expr -> MINUS expr .)
    NE              reduce using rule 65 (expr -> MINUS expr .)
    EQ              reduce using rule 65 (expr -> MINUS expr .)
    AND             reduce using rule 65 (expr -> MINUS expr .)
    OR              reduce using rule 65 (expr -> MINUS expr .)
    )               reduce using rule 65 (expr -> MINUS expr .)
    ,               reduce using rule 65 (expr -> MINUS expr .)
    ]               reduce using rule 65 (expr -> MINUS expr .)


state 76

    (66) expr -> ! expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 66 (expr -> ! expr .)
    MOD             reduce using rule 66 (expr -> ! expr .)
    DIVIDE          reduce using rule 66 (expr -> ! expr .)
    TIMES           reduce using rule 66 (expr -> ! expr .)
    -               reduce using rule 66 (expr -> ! expr .)
    +               reduce using rule 66 (expr -> ! expr .)
    >               reduce using rule 66 (expr -> ! expr .)
    GE              reduce using rule 66 (expr -> ! expr .)
    <               reduce using rule 66 (expr -> ! expr .)
    LE              reduce using rule 66 (expr -> ! expr .)
    NE              reduce using rule 66 (expr -> ! expr .)
    EQ              reduce using rule 66 (expr -> ! expr .)
    AND             reduce using rule 66 (expr -> ! expr .)
    OR              reduce using rule 66 (expr -> ! expr .)
    )               reduce using rule 66 (expr -> ! expr .)
    ,               reduce using rule 66 (expr -> ! expr .)
    ]               reduce using rule 66 (expr -> ! expr .)


state 77

    (20) param -> type_spec IDENT [ . ]
    ]               shift and go to state 109


state 78

    (15) fun_decl -> type_spec IDENT ( params ) compound_stmt .
    CHAR            reduce using rule 15 (fun_decl -> type_spec IDENT ( params ) compound_stmt .)
    FLOAT           reduce using rule 15 (fun_decl -> type_spec IDENT ( params ) compound_stmt .)
    INT             reduce using rule 15 (fun_decl -> type_spec IDENT ( params ) compound_stmt .)
    BOOL            reduce using rule 15 (fun_decl -> type_spec IDENT ( params ) compound_stmt .)
    VOID            reduce using rule 15 (fun_decl -> type_spec IDENT ( params ) compound_stmt .)
    $end            reduce using rule 15 (fun_decl -> type_spec IDENT ( params ) compound_stmt .)


state 79

    (22) compound_stmt -> { . local_decls stmt_list }
    (23) local_decls -> . empty
    (24) local_decls -> . local_decls local_decl
    (91) empty -> .
    CHAR            reduce using rule 91 (empty -> .)
    FLOAT           reduce using rule 91 (empty -> .)
    INT             reduce using rule 91 (empty -> .)
    BOOL            reduce using rule 91 (empty -> .)
    VOID            reduce using rule 91 (empty -> .)
    }               reduce using rule 91 (empty -> .)
    BREAK           reduce using rule 91 (empty -> .)
    RETURN          reduce using rule 91 (empty -> .)
    FOR             reduce using rule 91 (empty -> .)
    WHILE           reduce using rule 91 (empty -> .)
    IF              reduce using rule 91 (empty -> .)
    {               reduce using rule 91 (empty -> .)
    ;               reduce using rule 91 (empty -> .)
    NEW             reduce using rule 91 (empty -> .)
    STRING_LIT      reduce using rule 91 (empty -> .)
    CHAR_LIT        reduce using rule 91 (empty -> .)
    FLOAT_LIT       reduce using rule 91 (empty -> .)
    INT_LIT         reduce using rule 91 (empty -> .)
    FALSE           reduce using rule 91 (empty -> .)
    TRUE            reduce using rule 91 (empty -> .)
    BOOL_LIT        reduce using rule 91 (empty -> .)
    IDENT           reduce using rule 91 (empty -> .)
    DEC             reduce using rule 91 (empty -> .)
    INC             reduce using rule 91 (empty -> .)
    (               reduce using rule 91 (empty -> .)
    PLUS            reduce using rule 91 (empty -> .)
    MINUS           reduce using rule 91 (empty -> .)
    !               reduce using rule 91 (empty -> .)

    local_decls                    shift and go to state 110
    empty                          shift and go to state 111

state 80

    (19) param_list -> param_list , param .
    ,               reduce using rule 19 (param_list -> param_list , param .)
    )               reduce using rule 19 (param_list -> param_list , param .)


state 81

    (6) var_decl -> type_spec IDENT [ ] = expr . ;
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               shift and go to state 112
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 82

    (55) expr -> IDENT . SIZE .
    ;               reduce using rule 55 (expr -> IDENT . SIZE .)
    MOD             reduce using rule 55 (expr -> IDENT . SIZE .)
    DIVIDE          reduce using rule 55 (expr -> IDENT . SIZE .)
    TIMES           reduce using rule 55 (expr -> IDENT . SIZE .)
    -               reduce using rule 55 (expr -> IDENT . SIZE .)
    +               reduce using rule 55 (expr -> IDENT . SIZE .)
    >               reduce using rule 55 (expr -> IDENT . SIZE .)
    GE              reduce using rule 55 (expr -> IDENT . SIZE .)
    <               reduce using rule 55 (expr -> IDENT . SIZE .)
    LE              reduce using rule 55 (expr -> IDENT . SIZE .)
    NE              reduce using rule 55 (expr -> IDENT . SIZE .)
    EQ              reduce using rule 55 (expr -> IDENT . SIZE .)
    AND             reduce using rule 55 (expr -> IDENT . SIZE .)
    OR              reduce using rule 55 (expr -> IDENT . SIZE .)
    )               reduce using rule 55 (expr -> IDENT . SIZE .)
    ,               reduce using rule 55 (expr -> IDENT . SIZE .)
    ]               reduce using rule 55 (expr -> IDENT . SIZE .)


state 83

    (56) expr -> IDENT ( args . )
    )               shift and go to state 113


state 84

    (89) args -> empty .
    )               reduce using rule 89 (args -> empty .)


state 85

    (90) args -> arg_list .
    (88) arg_list -> arg_list . , expr
    )               reduce using rule 90 (args -> arg_list .)
    ,               shift and go to state 114


state 86

    (87) arg_list -> expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ,               reduce using rule 87 (arg_list -> expr .)
    )               reduce using rule 87 (arg_list -> expr .)
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 87

    (57) expr -> IDENT [ expr . ]
    (80) expr -> IDENT [ expr . ] = expr
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ]               shift and go to state 115
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 88

    (86) expr -> IDENT = expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 86 (expr -> IDENT = expr .)
    )               reduce using rule 86 (expr -> IDENT = expr .)
    ,               reduce using rule 86 (expr -> IDENT = expr .)
    ]               reduce using rule 86 (expr -> IDENT = expr .)
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 89

    (81) expr -> IDENT MODASSIGN expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 81 (expr -> IDENT MODASSIGN expr .)
    )               reduce using rule 81 (expr -> IDENT MODASSIGN expr .)
    ,               reduce using rule 81 (expr -> IDENT MODASSIGN expr .)
    ]               reduce using rule 81 (expr -> IDENT MODASSIGN expr .)
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 90

    (82) expr -> IDENT DIVASSIGN expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 82 (expr -> IDENT DIVASSIGN expr .)
    )               reduce using rule 82 (expr -> IDENT DIVASSIGN expr .)
    ,               reduce using rule 82 (expr -> IDENT DIVASSIGN expr .)
    ]               reduce using rule 82 (expr -> IDENT DIVASSIGN expr .)
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 91

    (83) expr -> IDENT MULASSIGN expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 83 (expr -> IDENT MULASSIGN expr .)
    )               reduce using rule 83 (expr -> IDENT MULASSIGN expr .)
    ,               reduce using rule 83 (expr -> IDENT MULASSIGN expr .)
    ]               reduce using rule 83 (expr -> IDENT MULASSIGN expr .)
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 92

    (84) expr -> IDENT SUBASSIGN expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 84 (expr -> IDENT SUBASSIGN expr .)
    )               reduce using rule 84 (expr -> IDENT SUBASSIGN expr .)
    ,               reduce using rule 84 (expr -> IDENT SUBASSIGN expr .)
    ]               reduce using rule 84 (expr -> IDENT SUBASSIGN expr .)
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 93

    (85) expr -> IDENT ADDASSIGN expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 85 (expr -> IDENT ADDASSIGN expr .)
    )               reduce using rule 85 (expr -> IDENT ADDASSIGN expr .)
    ,               reduce using rule 85 (expr -> IDENT ADDASSIGN expr .)
    ]               reduce using rule 85 (expr -> IDENT ADDASSIGN expr .)
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 94

    (67) expr -> expr MOD expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 67 (expr -> expr MOD expr .)
    MOD             reduce using rule 67 (expr -> expr MOD expr .)
    DIVIDE          reduce using rule 67 (expr -> expr MOD expr .)
    TIMES           reduce using rule 67 (expr -> expr MOD expr .)
    -               reduce using rule 67 (expr -> expr MOD expr .)
    +               reduce using rule 67 (expr -> expr MOD expr .)
    >               reduce using rule 67 (expr -> expr MOD expr .)
    GE              reduce using rule 67 (expr -> expr MOD expr .)
    <               reduce using rule 67 (expr -> expr MOD expr .)
    LE              reduce using rule 67 (expr -> expr MOD expr .)
    NE              reduce using rule 67 (expr -> expr MOD expr .)
    EQ              reduce using rule 67 (expr -> expr MOD expr .)
    AND             reduce using rule 67 (expr -> expr MOD expr .)
    OR              reduce using rule 67 (expr -> expr MOD expr .)
    )               reduce using rule 67 (expr -> expr MOD expr .)
    ,               reduce using rule 67 (expr -> expr MOD expr .)
    ]               reduce using rule 67 (expr -> expr MOD expr .)


state 95

    (68) expr -> expr DIVIDE expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 68 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 68 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 68 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 68 (expr -> expr DIVIDE expr .)
    -               reduce using rule 68 (expr -> expr DIVIDE expr .)
    +               reduce using rule 68 (expr -> expr DIVIDE expr .)
    >               reduce using rule 68 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 68 (expr -> expr DIVIDE expr .)
    <               reduce using rule 68 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 68 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 68 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 68 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 68 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 68 (expr -> expr DIVIDE expr .)
    )               reduce using rule 68 (expr -> expr DIVIDE expr .)
    ,               reduce using rule 68 (expr -> expr DIVIDE expr .)
    ]               reduce using rule 68 (expr -> expr DIVIDE expr .)


state 96

    (69) expr -> expr TIMES expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 69 (expr -> expr TIMES expr .)
    MOD             reduce using rule 69 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 69 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 69 (expr -> expr TIMES expr .)
    -               reduce using rule 69 (expr -> expr TIMES expr .)
    +               reduce using rule 69 (expr -> expr TIMES expr .)
    >               reduce using rule 69 (expr -> expr TIMES expr .)
    GE              reduce using rule 69 (expr -> expr TIMES expr .)
    <               reduce using rule 69 (expr -> expr TIMES expr .)
    LE              reduce using rule 69 (expr -> expr TIMES expr .)
    NE              reduce using rule 69 (expr -> expr TIMES expr .)
    EQ              reduce using rule 69 (expr -> expr TIMES expr .)
    AND             reduce using rule 69 (expr -> expr TIMES expr .)
    OR              reduce using rule 69 (expr -> expr TIMES expr .)
    )               reduce using rule 69 (expr -> expr TIMES expr .)
    ,               reduce using rule 69 (expr -> expr TIMES expr .)
    ]               reduce using rule 69 (expr -> expr TIMES expr .)


state 97

    (70) expr -> expr - expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 70 (expr -> expr - expr .)
    -               reduce using rule 70 (expr -> expr - expr .)
    +               reduce using rule 70 (expr -> expr - expr .)
    >               reduce using rule 70 (expr -> expr - expr .)
    GE              reduce using rule 70 (expr -> expr - expr .)
    <               reduce using rule 70 (expr -> expr - expr .)
    LE              reduce using rule 70 (expr -> expr - expr .)
    NE              reduce using rule 70 (expr -> expr - expr .)
    EQ              reduce using rule 70 (expr -> expr - expr .)
    AND             reduce using rule 70 (expr -> expr - expr .)
    OR              reduce using rule 70 (expr -> expr - expr .)
    )               reduce using rule 70 (expr -> expr - expr .)
    ,               reduce using rule 70 (expr -> expr - expr .)
    ]               reduce using rule 70 (expr -> expr - expr .)
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59


state 98

    (71) expr -> expr + expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 71 (expr -> expr + expr .)
    -               reduce using rule 71 (expr -> expr + expr .)
    +               reduce using rule 71 (expr -> expr + expr .)
    >               reduce using rule 71 (expr -> expr + expr .)
    GE              reduce using rule 71 (expr -> expr + expr .)
    <               reduce using rule 71 (expr -> expr + expr .)
    LE              reduce using rule 71 (expr -> expr + expr .)
    NE              reduce using rule 71 (expr -> expr + expr .)
    EQ              reduce using rule 71 (expr -> expr + expr .)
    AND             reduce using rule 71 (expr -> expr + expr .)
    OR              reduce using rule 71 (expr -> expr + expr .)
    )               reduce using rule 71 (expr -> expr + expr .)
    ,               reduce using rule 71 (expr -> expr + expr .)
    ]               reduce using rule 71 (expr -> expr + expr .)
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59


state 99

    (72) expr -> expr > expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 72 (expr -> expr > expr .)
    >               reduce using rule 72 (expr -> expr > expr .)
    GE              reduce using rule 72 (expr -> expr > expr .)
    <               reduce using rule 72 (expr -> expr > expr .)
    LE              reduce using rule 72 (expr -> expr > expr .)
    NE              reduce using rule 72 (expr -> expr > expr .)
    EQ              reduce using rule 72 (expr -> expr > expr .)
    AND             reduce using rule 72 (expr -> expr > expr .)
    OR              reduce using rule 72 (expr -> expr > expr .)
    )               reduce using rule 72 (expr -> expr > expr .)
    ,               reduce using rule 72 (expr -> expr > expr .)
    ]               reduce using rule 72 (expr -> expr > expr .)
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61


state 100

    (73) expr -> expr GE expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 73 (expr -> expr GE expr .)
    >               reduce using rule 73 (expr -> expr GE expr .)
    GE              reduce using rule 73 (expr -> expr GE expr .)
    <               reduce using rule 73 (expr -> expr GE expr .)
    LE              reduce using rule 73 (expr -> expr GE expr .)
    NE              reduce using rule 73 (expr -> expr GE expr .)
    EQ              reduce using rule 73 (expr -> expr GE expr .)
    AND             reduce using rule 73 (expr -> expr GE expr .)
    OR              reduce using rule 73 (expr -> expr GE expr .)
    )               reduce using rule 73 (expr -> expr GE expr .)
    ,               reduce using rule 73 (expr -> expr GE expr .)
    ]               reduce using rule 73 (expr -> expr GE expr .)
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61


state 101

    (74) expr -> expr < expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 74 (expr -> expr < expr .)
    >               reduce using rule 74 (expr -> expr < expr .)
    GE              reduce using rule 74 (expr -> expr < expr .)
    <               reduce using rule 74 (expr -> expr < expr .)
    LE              reduce using rule 74 (expr -> expr < expr .)
    NE              reduce using rule 74 (expr -> expr < expr .)
    EQ              reduce using rule 74 (expr -> expr < expr .)
    AND             reduce using rule 74 (expr -> expr < expr .)
    OR              reduce using rule 74 (expr -> expr < expr .)
    )               reduce using rule 74 (expr -> expr < expr .)
    ,               reduce using rule 74 (expr -> expr < expr .)
    ]               reduce using rule 74 (expr -> expr < expr .)
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61


state 102

    (75) expr -> expr LE expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 75 (expr -> expr LE expr .)
    >               reduce using rule 75 (expr -> expr LE expr .)
    GE              reduce using rule 75 (expr -> expr LE expr .)
    <               reduce using rule 75 (expr -> expr LE expr .)
    LE              reduce using rule 75 (expr -> expr LE expr .)
    NE              reduce using rule 75 (expr -> expr LE expr .)
    EQ              reduce using rule 75 (expr -> expr LE expr .)
    AND             reduce using rule 75 (expr -> expr LE expr .)
    OR              reduce using rule 75 (expr -> expr LE expr .)
    )               reduce using rule 75 (expr -> expr LE expr .)
    ,               reduce using rule 75 (expr -> expr LE expr .)
    ]               reduce using rule 75 (expr -> expr LE expr .)
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61


state 103

    (76) expr -> expr NE expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 76 (expr -> expr NE expr .)
    NE              reduce using rule 76 (expr -> expr NE expr .)
    EQ              reduce using rule 76 (expr -> expr NE expr .)
    AND             reduce using rule 76 (expr -> expr NE expr .)
    OR              reduce using rule 76 (expr -> expr NE expr .)
    )               reduce using rule 76 (expr -> expr NE expr .)
    ,               reduce using rule 76 (expr -> expr NE expr .)
    ]               reduce using rule 76 (expr -> expr NE expr .)
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65


state 104

    (77) expr -> expr EQ expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 77 (expr -> expr EQ expr .)
    NE              reduce using rule 77 (expr -> expr EQ expr .)
    EQ              reduce using rule 77 (expr -> expr EQ expr .)
    AND             reduce using rule 77 (expr -> expr EQ expr .)
    OR              reduce using rule 77 (expr -> expr EQ expr .)
    )               reduce using rule 77 (expr -> expr EQ expr .)
    ,               reduce using rule 77 (expr -> expr EQ expr .)
    ]               reduce using rule 77 (expr -> expr EQ expr .)
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65


state 105

    (78) expr -> expr AND expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 78 (expr -> expr AND expr .)
    AND             reduce using rule 78 (expr -> expr AND expr .)
    OR              reduce using rule 78 (expr -> expr AND expr .)
    )               reduce using rule 78 (expr -> expr AND expr .)
    ,               reduce using rule 78 (expr -> expr AND expr .)
    ]               reduce using rule 78 (expr -> expr AND expr .)
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67


state 106

    (79) expr -> expr OR expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 79 (expr -> expr OR expr .)
    OR              reduce using rule 79 (expr -> expr OR expr .)
    )               reduce using rule 79 (expr -> expr OR expr .)
    ,               reduce using rule 79 (expr -> expr OR expr .)
    ]               reduce using rule 79 (expr -> expr OR expr .)
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68


state 107

    (47) expr -> NEW type_spec [ . expr ]
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 116

state 108

    (63) expr -> ( expr ) .
    ;               reduce using rule 63 (expr -> ( expr ) .)
    MOD             reduce using rule 63 (expr -> ( expr ) .)
    DIVIDE          reduce using rule 63 (expr -> ( expr ) .)
    TIMES           reduce using rule 63 (expr -> ( expr ) .)
    -               reduce using rule 63 (expr -> ( expr ) .)
    +               reduce using rule 63 (expr -> ( expr ) .)
    >               reduce using rule 63 (expr -> ( expr ) .)
    GE              reduce using rule 63 (expr -> ( expr ) .)
    <               reduce using rule 63 (expr -> ( expr ) .)
    LE              reduce using rule 63 (expr -> ( expr ) .)
    NE              reduce using rule 63 (expr -> ( expr ) .)
    EQ              reduce using rule 63 (expr -> ( expr ) .)
    AND             reduce using rule 63 (expr -> ( expr ) .)
    OR              reduce using rule 63 (expr -> ( expr ) .)
    )               reduce using rule 63 (expr -> ( expr ) .)
    ,               reduce using rule 63 (expr -> ( expr ) .)
    ]               reduce using rule 63 (expr -> ( expr ) .)


state 109

    (20) param -> type_spec IDENT [ ] .
    ,               reduce using rule 20 (param -> type_spec IDENT [ ] .)
    )               reduce using rule 20 (param -> type_spec IDENT [ ] .)


state 110

    (22) compound_stmt -> { local_decls . stmt_list }
    (24) local_decls -> local_decls . local_decl
    (29) stmt_list -> . empty
    (30) stmt_list -> . stmt_list stmt
    (25) local_decl -> . type_spec IDENT [ ] = expr ;
    (26) local_decl -> . type_spec IDENT [ ] ;
    (27) local_decl -> . type_spec IDENT = expr ;
    (28) local_decl -> . type_spec IDENT ;
    (91) empty -> .
    (10) type_spec -> . CHAR
    (11) type_spec -> . FLOAT
    (12) type_spec -> . INT
    (13) type_spec -> . BOOL
    (14) type_spec -> . VOID
    }               reduce using rule 91 (empty -> .)
    BREAK           reduce using rule 91 (empty -> .)
    RETURN          reduce using rule 91 (empty -> .)
    FOR             reduce using rule 91 (empty -> .)
    WHILE           reduce using rule 91 (empty -> .)
    IF              reduce using rule 91 (empty -> .)
    {               reduce using rule 91 (empty -> .)
    ;               reduce using rule 91 (empty -> .)
    NEW             reduce using rule 91 (empty -> .)
    STRING_LIT      reduce using rule 91 (empty -> .)
    CHAR_LIT        reduce using rule 91 (empty -> .)
    FLOAT_LIT       reduce using rule 91 (empty -> .)
    INT_LIT         reduce using rule 91 (empty -> .)
    FALSE           reduce using rule 91 (empty -> .)
    TRUE            reduce using rule 91 (empty -> .)
    BOOL_LIT        reduce using rule 91 (empty -> .)
    IDENT           reduce using rule 91 (empty -> .)
    DEC             reduce using rule 91 (empty -> .)
    INC             reduce using rule 91 (empty -> .)
    (               reduce using rule 91 (empty -> .)
    PLUS            reduce using rule 91 (empty -> .)
    MINUS           reduce using rule 91 (empty -> .)
    !               reduce using rule 91 (empty -> .)
    CHAR            shift and go to state 7
    FLOAT           shift and go to state 8
    INT             shift and go to state 9
    BOOL            shift and go to state 10
    VOID            shift and go to state 11

    stmt_list                      shift and go to state 117
    local_decl                     shift and go to state 118
    empty                          shift and go to state 119
    type_spec                      shift and go to state 120

state 111

    (23) local_decls -> empty .
    CHAR            reduce using rule 23 (local_decls -> empty .)
    FLOAT           reduce using rule 23 (local_decls -> empty .)
    INT             reduce using rule 23 (local_decls -> empty .)
    BOOL            reduce using rule 23 (local_decls -> empty .)
    VOID            reduce using rule 23 (local_decls -> empty .)
    }               reduce using rule 23 (local_decls -> empty .)
    BREAK           reduce using rule 23 (local_decls -> empty .)
    RETURN          reduce using rule 23 (local_decls -> empty .)
    FOR             reduce using rule 23 (local_decls -> empty .)
    WHILE           reduce using rule 23 (local_decls -> empty .)
    IF              reduce using rule 23 (local_decls -> empty .)
    {               reduce using rule 23 (local_decls -> empty .)
    ;               reduce using rule 23 (local_decls -> empty .)
    NEW             reduce using rule 23 (local_decls -> empty .)
    STRING_LIT      reduce using rule 23 (local_decls -> empty .)
    CHAR_LIT        reduce using rule 23 (local_decls -> empty .)
    FLOAT_LIT       reduce using rule 23 (local_decls -> empty .)
    INT_LIT         reduce using rule 23 (local_decls -> empty .)
    FALSE           reduce using rule 23 (local_decls -> empty .)
    TRUE            reduce using rule 23 (local_decls -> empty .)
    BOOL_LIT        reduce using rule 23 (local_decls -> empty .)
    IDENT           reduce using rule 23 (local_decls -> empty .)
    DEC             reduce using rule 23 (local_decls -> empty .)
    INC             reduce using rule 23 (local_decls -> empty .)
    (               reduce using rule 23 (local_decls -> empty .)
    PLUS            reduce using rule 23 (local_decls -> empty .)
    MINUS           reduce using rule 23 (local_decls -> empty .)
    !               reduce using rule 23 (local_decls -> empty .)


state 112

    (6) var_decl -> type_spec IDENT [ ] = expr ; .
    CHAR            reduce using rule 6 (var_decl -> type_spec IDENT [ ] = expr ; .)
    FLOAT           reduce using rule 6 (var_decl -> type_spec IDENT [ ] = expr ; .)
    INT             reduce using rule 6 (var_decl -> type_spec IDENT [ ] = expr ; .)
    BOOL            reduce using rule 6 (var_decl -> type_spec IDENT [ ] = expr ; .)
    VOID            reduce using rule 6 (var_decl -> type_spec IDENT [ ] = expr ; .)
    $end            reduce using rule 6 (var_decl -> type_spec IDENT [ ] = expr ; .)


state 113

    (56) expr -> IDENT ( args ) .
    ;               reduce using rule 56 (expr -> IDENT ( args ) .)
    MOD             reduce using rule 56 (expr -> IDENT ( args ) .)
    DIVIDE          reduce using rule 56 (expr -> IDENT ( args ) .)
    TIMES           reduce using rule 56 (expr -> IDENT ( args ) .)
    -               reduce using rule 56 (expr -> IDENT ( args ) .)
    +               reduce using rule 56 (expr -> IDENT ( args ) .)
    >               reduce using rule 56 (expr -> IDENT ( args ) .)
    GE              reduce using rule 56 (expr -> IDENT ( args ) .)
    <               reduce using rule 56 (expr -> IDENT ( args ) .)
    LE              reduce using rule 56 (expr -> IDENT ( args ) .)
    NE              reduce using rule 56 (expr -> IDENT ( args ) .)
    EQ              reduce using rule 56 (expr -> IDENT ( args ) .)
    AND             reduce using rule 56 (expr -> IDENT ( args ) .)
    OR              reduce using rule 56 (expr -> IDENT ( args ) .)
    )               reduce using rule 56 (expr -> IDENT ( args ) .)
    ,               reduce using rule 56 (expr -> IDENT ( args ) .)
    ]               reduce using rule 56 (expr -> IDENT ( args ) .)


state 114

    (88) arg_list -> arg_list , . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 121

state 115

    (57) expr -> IDENT [ expr ] .
    (80) expr -> IDENT [ expr ] . = expr
    ;               reduce using rule 57 (expr -> IDENT [ expr ] .)
    MOD             reduce using rule 57 (expr -> IDENT [ expr ] .)
    DIVIDE          reduce using rule 57 (expr -> IDENT [ expr ] .)
    TIMES           reduce using rule 57 (expr -> IDENT [ expr ] .)
    -               reduce using rule 57 (expr -> IDENT [ expr ] .)
    +               reduce using rule 57 (expr -> IDENT [ expr ] .)
    >               reduce using rule 57 (expr -> IDENT [ expr ] .)
    GE              reduce using rule 57 (expr -> IDENT [ expr ] .)
    <               reduce using rule 57 (expr -> IDENT [ expr ] .)
    LE              reduce using rule 57 (expr -> IDENT [ expr ] .)
    NE              reduce using rule 57 (expr -> IDENT [ expr ] .)
    EQ              reduce using rule 57 (expr -> IDENT [ expr ] .)
    AND             reduce using rule 57 (expr -> IDENT [ expr ] .)
    OR              reduce using rule 57 (expr -> IDENT [ expr ] .)
    )               reduce using rule 57 (expr -> IDENT [ expr ] .)
    ,               reduce using rule 57 (expr -> IDENT [ expr ] .)
    ]               reduce using rule 57 (expr -> IDENT [ expr ] .)
    =               shift and go to state 122


state 116

    (47) expr -> NEW type_spec [ expr . ]
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ]               shift and go to state 123
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 117

    (22) compound_stmt -> { local_decls stmt_list . }
    (30) stmt_list -> stmt_list . stmt
    (31) stmt -> . break_stmt
    (32) stmt -> . return_stmt
    (33) stmt -> . for_stmt
    (34) stmt -> . while_stmt
    (35) stmt -> . if_stmt
    (36) stmt -> . compound_stmt
    (37) stmt -> . expr_stmt
    (46) break_stmt -> . BREAK ;
    (44) return_stmt -> . RETURN expr ;
    (45) return_stmt -> . RETURN ;
    (41) for_stmt -> . FOR ( expr ; expr ; expr ) stmt
    (40) while_stmt -> . WHILE ( expr ) stmt
    (42) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (43) if_stmt -> . IF ( expr ) stmt
    (22) compound_stmt -> . { local_decls stmt_list }
    (38) expr_stmt -> . ;
    (39) expr_stmt -> . expr ;
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    }               shift and go to state 124
    BREAK           shift and go to state 133
    RETURN          shift and go to state 135
    FOR             shift and go to state 137
    WHILE           shift and go to state 138
    IF              shift and go to state 139
    {               shift and go to state 79
    ;               shift and go to state 134
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    stmt                           shift and go to state 125
    break_stmt                     shift and go to state 126
    return_stmt                    shift and go to state 127
    for_stmt                       shift and go to state 128
    while_stmt                     shift and go to state 129
    if_stmt                        shift and go to state 130
    compound_stmt                  shift and go to state 131
    expr_stmt                      shift and go to state 132
    expr                           shift and go to state 136

state 118

    (24) local_decls -> local_decls local_decl .
    CHAR            reduce using rule 24 (local_decls -> local_decls local_decl .)
    FLOAT           reduce using rule 24 (local_decls -> local_decls local_decl .)
    INT             reduce using rule 24 (local_decls -> local_decls local_decl .)
    BOOL            reduce using rule 24 (local_decls -> local_decls local_decl .)
    VOID            reduce using rule 24 (local_decls -> local_decls local_decl .)
    }               reduce using rule 24 (local_decls -> local_decls local_decl .)
    BREAK           reduce using rule 24 (local_decls -> local_decls local_decl .)
    RETURN          reduce using rule 24 (local_decls -> local_decls local_decl .)
    FOR             reduce using rule 24 (local_decls -> local_decls local_decl .)
    WHILE           reduce using rule 24 (local_decls -> local_decls local_decl .)
    IF              reduce using rule 24 (local_decls -> local_decls local_decl .)
    {               reduce using rule 24 (local_decls -> local_decls local_decl .)
    ;               reduce using rule 24 (local_decls -> local_decls local_decl .)
    NEW             reduce using rule 24 (local_decls -> local_decls local_decl .)
    STRING_LIT      reduce using rule 24 (local_decls -> local_decls local_decl .)
    CHAR_LIT        reduce using rule 24 (local_decls -> local_decls local_decl .)
    FLOAT_LIT       reduce using rule 24 (local_decls -> local_decls local_decl .)
    INT_LIT         reduce using rule 24 (local_decls -> local_decls local_decl .)
    FALSE           reduce using rule 24 (local_decls -> local_decls local_decl .)
    TRUE            reduce using rule 24 (local_decls -> local_decls local_decl .)
    BOOL_LIT        reduce using rule 24 (local_decls -> local_decls local_decl .)
    IDENT           reduce using rule 24 (local_decls -> local_decls local_decl .)
    DEC             reduce using rule 24 (local_decls -> local_decls local_decl .)
    INC             reduce using rule 24 (local_decls -> local_decls local_decl .)
    (               reduce using rule 24 (local_decls -> local_decls local_decl .)
    PLUS            reduce using rule 24 (local_decls -> local_decls local_decl .)
    MINUS           reduce using rule 24 (local_decls -> local_decls local_decl .)
    !               reduce using rule 24 (local_decls -> local_decls local_decl .)


state 119

    (29) stmt_list -> empty .
    }               reduce using rule 29 (stmt_list -> empty .)
    BREAK           reduce using rule 29 (stmt_list -> empty .)
    RETURN          reduce using rule 29 (stmt_list -> empty .)
    FOR             reduce using rule 29 (stmt_list -> empty .)
    WHILE           reduce using rule 29 (stmt_list -> empty .)
    IF              reduce using rule 29 (stmt_list -> empty .)
    {               reduce using rule 29 (stmt_list -> empty .)
    ;               reduce using rule 29 (stmt_list -> empty .)
    NEW             reduce using rule 29 (stmt_list -> empty .)
    STRING_LIT      reduce using rule 29 (stmt_list -> empty .)
    CHAR_LIT        reduce using rule 29 (stmt_list -> empty .)
    FLOAT_LIT       reduce using rule 29 (stmt_list -> empty .)
    INT_LIT         reduce using rule 29 (stmt_list -> empty .)
    FALSE           reduce using rule 29 (stmt_list -> empty .)
    TRUE            reduce using rule 29 (stmt_list -> empty .)
    BOOL_LIT        reduce using rule 29 (stmt_list -> empty .)
    IDENT           reduce using rule 29 (stmt_list -> empty .)
    DEC             reduce using rule 29 (stmt_list -> empty .)
    INC             reduce using rule 29 (stmt_list -> empty .)
    (               reduce using rule 29 (stmt_list -> empty .)
    PLUS            reduce using rule 29 (stmt_list -> empty .)
    MINUS           reduce using rule 29 (stmt_list -> empty .)
    !               reduce using rule 29 (stmt_list -> empty .)


state 120

    (25) local_decl -> type_spec . IDENT [ ] = expr ;
    (26) local_decl -> type_spec . IDENT [ ] ;
    (27) local_decl -> type_spec . IDENT = expr ;
    (28) local_decl -> type_spec . IDENT ;
    IDENT           shift and go to state 140


state 121

    (88) arg_list -> arg_list , expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ,               reduce using rule 88 (arg_list -> arg_list , expr .)
    )               reduce using rule 88 (arg_list -> arg_list , expr .)
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 122

    (80) expr -> IDENT [ expr ] = . expr
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 141

state 123

    (47) expr -> NEW type_spec [ expr ] .
    ;               reduce using rule 47 (expr -> NEW type_spec [ expr ] .)
    MOD             reduce using rule 47 (expr -> NEW type_spec [ expr ] .)
    DIVIDE          reduce using rule 47 (expr -> NEW type_spec [ expr ] .)
    TIMES           reduce using rule 47 (expr -> NEW type_spec [ expr ] .)
    -               reduce using rule 47 (expr -> NEW type_spec [ expr ] .)
    +               reduce using rule 47 (expr -> NEW type_spec [ expr ] .)
    >               reduce using rule 47 (expr -> NEW type_spec [ expr ] .)
    GE              reduce using rule 47 (expr -> NEW type_spec [ expr ] .)
    <               reduce using rule 47 (expr -> NEW type_spec [ expr ] .)
    LE              reduce using rule 47 (expr -> NEW type_spec [ expr ] .)
    NE              reduce using rule 47 (expr -> NEW type_spec [ expr ] .)
    EQ              reduce using rule 47 (expr -> NEW type_spec [ expr ] .)
    AND             reduce using rule 47 (expr -> NEW type_spec [ expr ] .)
    OR              reduce using rule 47 (expr -> NEW type_spec [ expr ] .)
    )               reduce using rule 47 (expr -> NEW type_spec [ expr ] .)
    ,               reduce using rule 47 (expr -> NEW type_spec [ expr ] .)
    ]               reduce using rule 47 (expr -> NEW type_spec [ expr ] .)


state 124

    (22) compound_stmt -> { local_decls stmt_list } .
    CHAR            reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    FLOAT           reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    INT             reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    BOOL            reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    VOID            reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    $end            reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    }               reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    BREAK           reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    RETURN          reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    FOR             reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    WHILE           reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    IF              reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    {               reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    ;               reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    NEW             reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    STRING_LIT      reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    CHAR_LIT        reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    FLOAT_LIT       reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    INT_LIT         reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    FALSE           reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    TRUE            reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    BOOL_LIT        reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    IDENT           reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    DEC             reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    INC             reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    (               reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    PLUS            reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    MINUS           reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    !               reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)
    ELSE            reduce using rule 22 (compound_stmt -> { local_decls stmt_list } .)


state 125

    (30) stmt_list -> stmt_list stmt .
    }               reduce using rule 30 (stmt_list -> stmt_list stmt .)
    BREAK           reduce using rule 30 (stmt_list -> stmt_list stmt .)
    RETURN          reduce using rule 30 (stmt_list -> stmt_list stmt .)
    FOR             reduce using rule 30 (stmt_list -> stmt_list stmt .)
    WHILE           reduce using rule 30 (stmt_list -> stmt_list stmt .)
    IF              reduce using rule 30 (stmt_list -> stmt_list stmt .)
    {               reduce using rule 30 (stmt_list -> stmt_list stmt .)
    ;               reduce using rule 30 (stmt_list -> stmt_list stmt .)
    NEW             reduce using rule 30 (stmt_list -> stmt_list stmt .)
    STRING_LIT      reduce using rule 30 (stmt_list -> stmt_list stmt .)
    CHAR_LIT        reduce using rule 30 (stmt_list -> stmt_list stmt .)
    FLOAT_LIT       reduce using rule 30 (stmt_list -> stmt_list stmt .)
    INT_LIT         reduce using rule 30 (stmt_list -> stmt_list stmt .)
    FALSE           reduce using rule 30 (stmt_list -> stmt_list stmt .)
    TRUE            reduce using rule 30 (stmt_list -> stmt_list stmt .)
    BOOL_LIT        reduce using rule 30 (stmt_list -> stmt_list stmt .)
    IDENT           reduce using rule 30 (stmt_list -> stmt_list stmt .)
    DEC             reduce using rule 30 (stmt_list -> stmt_list stmt .)
    INC             reduce using rule 30 (stmt_list -> stmt_list stmt .)
    (               reduce using rule 30 (stmt_list -> stmt_list stmt .)
    PLUS            reduce using rule 30 (stmt_list -> stmt_list stmt .)
    MINUS           reduce using rule 30 (stmt_list -> stmt_list stmt .)
    !               reduce using rule 30 (stmt_list -> stmt_list stmt .)


state 126

    (31) stmt -> break_stmt .
    }               reduce using rule 31 (stmt -> break_stmt .)
    BREAK           reduce using rule 31 (stmt -> break_stmt .)
    RETURN          reduce using rule 31 (stmt -> break_stmt .)
    FOR             reduce using rule 31 (stmt -> break_stmt .)
    WHILE           reduce using rule 31 (stmt -> break_stmt .)
    IF              reduce using rule 31 (stmt -> break_stmt .)
    {               reduce using rule 31 (stmt -> break_stmt .)
    ;               reduce using rule 31 (stmt -> break_stmt .)
    NEW             reduce using rule 31 (stmt -> break_stmt .)
    STRING_LIT      reduce using rule 31 (stmt -> break_stmt .)
    CHAR_LIT        reduce using rule 31 (stmt -> break_stmt .)
    FLOAT_LIT       reduce using rule 31 (stmt -> break_stmt .)
    INT_LIT         reduce using rule 31 (stmt -> break_stmt .)
    FALSE           reduce using rule 31 (stmt -> break_stmt .)
    TRUE            reduce using rule 31 (stmt -> break_stmt .)
    BOOL_LIT        reduce using rule 31 (stmt -> break_stmt .)
    IDENT           reduce using rule 31 (stmt -> break_stmt .)
    DEC             reduce using rule 31 (stmt -> break_stmt .)
    INC             reduce using rule 31 (stmt -> break_stmt .)
    (               reduce using rule 31 (stmt -> break_stmt .)
    PLUS            reduce using rule 31 (stmt -> break_stmt .)
    MINUS           reduce using rule 31 (stmt -> break_stmt .)
    !               reduce using rule 31 (stmt -> break_stmt .)
    ELSE            reduce using rule 31 (stmt -> break_stmt .)


state 127

    (32) stmt -> return_stmt .
    }               reduce using rule 32 (stmt -> return_stmt .)
    BREAK           reduce using rule 32 (stmt -> return_stmt .)
    RETURN          reduce using rule 32 (stmt -> return_stmt .)
    FOR             reduce using rule 32 (stmt -> return_stmt .)
    WHILE           reduce using rule 32 (stmt -> return_stmt .)
    IF              reduce using rule 32 (stmt -> return_stmt .)
    {               reduce using rule 32 (stmt -> return_stmt .)
    ;               reduce using rule 32 (stmt -> return_stmt .)
    NEW             reduce using rule 32 (stmt -> return_stmt .)
    STRING_LIT      reduce using rule 32 (stmt -> return_stmt .)
    CHAR_LIT        reduce using rule 32 (stmt -> return_stmt .)
    FLOAT_LIT       reduce using rule 32 (stmt -> return_stmt .)
    INT_LIT         reduce using rule 32 (stmt -> return_stmt .)
    FALSE           reduce using rule 32 (stmt -> return_stmt .)
    TRUE            reduce using rule 32 (stmt -> return_stmt .)
    BOOL_LIT        reduce using rule 32 (stmt -> return_stmt .)
    IDENT           reduce using rule 32 (stmt -> return_stmt .)
    DEC             reduce using rule 32 (stmt -> return_stmt .)
    INC             reduce using rule 32 (stmt -> return_stmt .)
    (               reduce using rule 32 (stmt -> return_stmt .)
    PLUS            reduce using rule 32 (stmt -> return_stmt .)
    MINUS           reduce using rule 32 (stmt -> return_stmt .)
    !               reduce using rule 32 (stmt -> return_stmt .)
    ELSE            reduce using rule 32 (stmt -> return_stmt .)


state 128

    (33) stmt -> for_stmt .
    }               reduce using rule 33 (stmt -> for_stmt .)
    BREAK           reduce using rule 33 (stmt -> for_stmt .)
    RETURN          reduce using rule 33 (stmt -> for_stmt .)
    FOR             reduce using rule 33 (stmt -> for_stmt .)
    WHILE           reduce using rule 33 (stmt -> for_stmt .)
    IF              reduce using rule 33 (stmt -> for_stmt .)
    {               reduce using rule 33 (stmt -> for_stmt .)
    ;               reduce using rule 33 (stmt -> for_stmt .)
    NEW             reduce using rule 33 (stmt -> for_stmt .)
    STRING_LIT      reduce using rule 33 (stmt -> for_stmt .)
    CHAR_LIT        reduce using rule 33 (stmt -> for_stmt .)
    FLOAT_LIT       reduce using rule 33 (stmt -> for_stmt .)
    INT_LIT         reduce using rule 33 (stmt -> for_stmt .)
    FALSE           reduce using rule 33 (stmt -> for_stmt .)
    TRUE            reduce using rule 33 (stmt -> for_stmt .)
    BOOL_LIT        reduce using rule 33 (stmt -> for_stmt .)
    IDENT           reduce using rule 33 (stmt -> for_stmt .)
    DEC             reduce using rule 33 (stmt -> for_stmt .)
    INC             reduce using rule 33 (stmt -> for_stmt .)
    (               reduce using rule 33 (stmt -> for_stmt .)
    PLUS            reduce using rule 33 (stmt -> for_stmt .)
    MINUS           reduce using rule 33 (stmt -> for_stmt .)
    !               reduce using rule 33 (stmt -> for_stmt .)
    ELSE            reduce using rule 33 (stmt -> for_stmt .)


state 129

    (34) stmt -> while_stmt .
    }               reduce using rule 34 (stmt -> while_stmt .)
    BREAK           reduce using rule 34 (stmt -> while_stmt .)
    RETURN          reduce using rule 34 (stmt -> while_stmt .)
    FOR             reduce using rule 34 (stmt -> while_stmt .)
    WHILE           reduce using rule 34 (stmt -> while_stmt .)
    IF              reduce using rule 34 (stmt -> while_stmt .)
    {               reduce using rule 34 (stmt -> while_stmt .)
    ;               reduce using rule 34 (stmt -> while_stmt .)
    NEW             reduce using rule 34 (stmt -> while_stmt .)
    STRING_LIT      reduce using rule 34 (stmt -> while_stmt .)
    CHAR_LIT        reduce using rule 34 (stmt -> while_stmt .)
    FLOAT_LIT       reduce using rule 34 (stmt -> while_stmt .)
    INT_LIT         reduce using rule 34 (stmt -> while_stmt .)
    FALSE           reduce using rule 34 (stmt -> while_stmt .)
    TRUE            reduce using rule 34 (stmt -> while_stmt .)
    BOOL_LIT        reduce using rule 34 (stmt -> while_stmt .)
    IDENT           reduce using rule 34 (stmt -> while_stmt .)
    DEC             reduce using rule 34 (stmt -> while_stmt .)
    INC             reduce using rule 34 (stmt -> while_stmt .)
    (               reduce using rule 34 (stmt -> while_stmt .)
    PLUS            reduce using rule 34 (stmt -> while_stmt .)
    MINUS           reduce using rule 34 (stmt -> while_stmt .)
    !               reduce using rule 34 (stmt -> while_stmt .)
    ELSE            reduce using rule 34 (stmt -> while_stmt .)


state 130

    (35) stmt -> if_stmt .
    }               reduce using rule 35 (stmt -> if_stmt .)
    BREAK           reduce using rule 35 (stmt -> if_stmt .)
    RETURN          reduce using rule 35 (stmt -> if_stmt .)
    FOR             reduce using rule 35 (stmt -> if_stmt .)
    WHILE           reduce using rule 35 (stmt -> if_stmt .)
    IF              reduce using rule 35 (stmt -> if_stmt .)
    {               reduce using rule 35 (stmt -> if_stmt .)
    ;               reduce using rule 35 (stmt -> if_stmt .)
    NEW             reduce using rule 35 (stmt -> if_stmt .)
    STRING_LIT      reduce using rule 35 (stmt -> if_stmt .)
    CHAR_LIT        reduce using rule 35 (stmt -> if_stmt .)
    FLOAT_LIT       reduce using rule 35 (stmt -> if_stmt .)
    INT_LIT         reduce using rule 35 (stmt -> if_stmt .)
    FALSE           reduce using rule 35 (stmt -> if_stmt .)
    TRUE            reduce using rule 35 (stmt -> if_stmt .)
    BOOL_LIT        reduce using rule 35 (stmt -> if_stmt .)
    IDENT           reduce using rule 35 (stmt -> if_stmt .)
    DEC             reduce using rule 35 (stmt -> if_stmt .)
    INC             reduce using rule 35 (stmt -> if_stmt .)
    (               reduce using rule 35 (stmt -> if_stmt .)
    PLUS            reduce using rule 35 (stmt -> if_stmt .)
    MINUS           reduce using rule 35 (stmt -> if_stmt .)
    !               reduce using rule 35 (stmt -> if_stmt .)
    ELSE            reduce using rule 35 (stmt -> if_stmt .)


state 131

    (36) stmt -> compound_stmt .
    }               reduce using rule 36 (stmt -> compound_stmt .)
    BREAK           reduce using rule 36 (stmt -> compound_stmt .)
    RETURN          reduce using rule 36 (stmt -> compound_stmt .)
    FOR             reduce using rule 36 (stmt -> compound_stmt .)
    WHILE           reduce using rule 36 (stmt -> compound_stmt .)
    IF              reduce using rule 36 (stmt -> compound_stmt .)
    {               reduce using rule 36 (stmt -> compound_stmt .)
    ;               reduce using rule 36 (stmt -> compound_stmt .)
    NEW             reduce using rule 36 (stmt -> compound_stmt .)
    STRING_LIT      reduce using rule 36 (stmt -> compound_stmt .)
    CHAR_LIT        reduce using rule 36 (stmt -> compound_stmt .)
    FLOAT_LIT       reduce using rule 36 (stmt -> compound_stmt .)
    INT_LIT         reduce using rule 36 (stmt -> compound_stmt .)
    FALSE           reduce using rule 36 (stmt -> compound_stmt .)
    TRUE            reduce using rule 36 (stmt -> compound_stmt .)
    BOOL_LIT        reduce using rule 36 (stmt -> compound_stmt .)
    IDENT           reduce using rule 36 (stmt -> compound_stmt .)
    DEC             reduce using rule 36 (stmt -> compound_stmt .)
    INC             reduce using rule 36 (stmt -> compound_stmt .)
    (               reduce using rule 36 (stmt -> compound_stmt .)
    PLUS            reduce using rule 36 (stmt -> compound_stmt .)
    MINUS           reduce using rule 36 (stmt -> compound_stmt .)
    !               reduce using rule 36 (stmt -> compound_stmt .)
    ELSE            reduce using rule 36 (stmt -> compound_stmt .)


state 132

    (37) stmt -> expr_stmt .
    }               reduce using rule 37 (stmt -> expr_stmt .)
    BREAK           reduce using rule 37 (stmt -> expr_stmt .)
    RETURN          reduce using rule 37 (stmt -> expr_stmt .)
    FOR             reduce using rule 37 (stmt -> expr_stmt .)
    WHILE           reduce using rule 37 (stmt -> expr_stmt .)
    IF              reduce using rule 37 (stmt -> expr_stmt .)
    {               reduce using rule 37 (stmt -> expr_stmt .)
    ;               reduce using rule 37 (stmt -> expr_stmt .)
    NEW             reduce using rule 37 (stmt -> expr_stmt .)
    STRING_LIT      reduce using rule 37 (stmt -> expr_stmt .)
    CHAR_LIT        reduce using rule 37 (stmt -> expr_stmt .)
    FLOAT_LIT       reduce using rule 37 (stmt -> expr_stmt .)
    INT_LIT         reduce using rule 37 (stmt -> expr_stmt .)
    FALSE           reduce using rule 37 (stmt -> expr_stmt .)
    TRUE            reduce using rule 37 (stmt -> expr_stmt .)
    BOOL_LIT        reduce using rule 37 (stmt -> expr_stmt .)
    IDENT           reduce using rule 37 (stmt -> expr_stmt .)
    DEC             reduce using rule 37 (stmt -> expr_stmt .)
    INC             reduce using rule 37 (stmt -> expr_stmt .)
    (               reduce using rule 37 (stmt -> expr_stmt .)
    PLUS            reduce using rule 37 (stmt -> expr_stmt .)
    MINUS           reduce using rule 37 (stmt -> expr_stmt .)
    !               reduce using rule 37 (stmt -> expr_stmt .)
    ELSE            reduce using rule 37 (stmt -> expr_stmt .)


state 133

    (46) break_stmt -> BREAK . ;
    ;               shift and go to state 142


state 134

    (38) expr_stmt -> ; .
    }               reduce using rule 38 (expr_stmt -> ; .)
    BREAK           reduce using rule 38 (expr_stmt -> ; .)
    RETURN          reduce using rule 38 (expr_stmt -> ; .)
    FOR             reduce using rule 38 (expr_stmt -> ; .)
    WHILE           reduce using rule 38 (expr_stmt -> ; .)
    IF              reduce using rule 38 (expr_stmt -> ; .)
    {               reduce using rule 38 (expr_stmt -> ; .)
    ;               reduce using rule 38 (expr_stmt -> ; .)
    NEW             reduce using rule 38 (expr_stmt -> ; .)
    STRING_LIT      reduce using rule 38 (expr_stmt -> ; .)
    CHAR_LIT        reduce using rule 38 (expr_stmt -> ; .)
    FLOAT_LIT       reduce using rule 38 (expr_stmt -> ; .)
    INT_LIT         reduce using rule 38 (expr_stmt -> ; .)
    FALSE           reduce using rule 38 (expr_stmt -> ; .)
    TRUE            reduce using rule 38 (expr_stmt -> ; .)
    BOOL_LIT        reduce using rule 38 (expr_stmt -> ; .)
    IDENT           reduce using rule 38 (expr_stmt -> ; .)
    DEC             reduce using rule 38 (expr_stmt -> ; .)
    INC             reduce using rule 38 (expr_stmt -> ; .)
    (               reduce using rule 38 (expr_stmt -> ; .)
    PLUS            reduce using rule 38 (expr_stmt -> ; .)
    MINUS           reduce using rule 38 (expr_stmt -> ; .)
    !               reduce using rule 38 (expr_stmt -> ; .)
    ELSE            reduce using rule 38 (expr_stmt -> ; .)


state 135

    (44) return_stmt -> RETURN . expr ;
    (45) return_stmt -> RETURN . ;
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    ;               shift and go to state 144
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 143

state 136

    (39) expr_stmt -> expr . ;
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               shift and go to state 145
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 137

    (41) for_stmt -> FOR . ( expr ; expr ; expr ) stmt
    (               shift and go to state 146


state 138

    (40) while_stmt -> WHILE . ( expr ) stmt
    (               shift and go to state 147


state 139

    (42) if_stmt -> IF . ( expr ) stmt ELSE stmt
    (43) if_stmt -> IF . ( expr ) stmt
    (               shift and go to state 148


state 140

    (25) local_decl -> type_spec IDENT . [ ] = expr ;
    (26) local_decl -> type_spec IDENT . [ ] ;
    (27) local_decl -> type_spec IDENT . = expr ;
    (28) local_decl -> type_spec IDENT . ;
    [               shift and go to state 149
    =               shift and go to state 150
    ;               shift and go to state 151


state 141

    (80) expr -> IDENT [ expr ] = expr .
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               reduce using rule 80 (expr -> IDENT [ expr ] = expr .)
    )               reduce using rule 80 (expr -> IDENT [ expr ] = expr .)
    ,               reduce using rule 80 (expr -> IDENT [ expr ] = expr .)
    ]               reduce using rule 80 (expr -> IDENT [ expr ] = expr .)
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 142

    (46) break_stmt -> BREAK ; .
    }               reduce using rule 46 (break_stmt -> BREAK ; .)
    BREAK           reduce using rule 46 (break_stmt -> BREAK ; .)
    RETURN          reduce using rule 46 (break_stmt -> BREAK ; .)
    FOR             reduce using rule 46 (break_stmt -> BREAK ; .)
    WHILE           reduce using rule 46 (break_stmt -> BREAK ; .)
    IF              reduce using rule 46 (break_stmt -> BREAK ; .)
    {               reduce using rule 46 (break_stmt -> BREAK ; .)
    ;               reduce using rule 46 (break_stmt -> BREAK ; .)
    NEW             reduce using rule 46 (break_stmt -> BREAK ; .)
    STRING_LIT      reduce using rule 46 (break_stmt -> BREAK ; .)
    CHAR_LIT        reduce using rule 46 (break_stmt -> BREAK ; .)
    FLOAT_LIT       reduce using rule 46 (break_stmt -> BREAK ; .)
    INT_LIT         reduce using rule 46 (break_stmt -> BREAK ; .)
    FALSE           reduce using rule 46 (break_stmt -> BREAK ; .)
    TRUE            reduce using rule 46 (break_stmt -> BREAK ; .)
    BOOL_LIT        reduce using rule 46 (break_stmt -> BREAK ; .)
    IDENT           reduce using rule 46 (break_stmt -> BREAK ; .)
    DEC             reduce using rule 46 (break_stmt -> BREAK ; .)
    INC             reduce using rule 46 (break_stmt -> BREAK ; .)
    (               reduce using rule 46 (break_stmt -> BREAK ; .)
    PLUS            reduce using rule 46 (break_stmt -> BREAK ; .)
    MINUS           reduce using rule 46 (break_stmt -> BREAK ; .)
    !               reduce using rule 46 (break_stmt -> BREAK ; .)
    ELSE            reduce using rule 46 (break_stmt -> BREAK ; .)


state 143

    (44) return_stmt -> RETURN expr . ;
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               shift and go to state 152
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 144

    (45) return_stmt -> RETURN ; .
    }               reduce using rule 45 (return_stmt -> RETURN ; .)
    BREAK           reduce using rule 45 (return_stmt -> RETURN ; .)
    RETURN          reduce using rule 45 (return_stmt -> RETURN ; .)
    FOR             reduce using rule 45 (return_stmt -> RETURN ; .)
    WHILE           reduce using rule 45 (return_stmt -> RETURN ; .)
    IF              reduce using rule 45 (return_stmt -> RETURN ; .)
    {               reduce using rule 45 (return_stmt -> RETURN ; .)
    ;               reduce using rule 45 (return_stmt -> RETURN ; .)
    NEW             reduce using rule 45 (return_stmt -> RETURN ; .)
    STRING_LIT      reduce using rule 45 (return_stmt -> RETURN ; .)
    CHAR_LIT        reduce using rule 45 (return_stmt -> RETURN ; .)
    FLOAT_LIT       reduce using rule 45 (return_stmt -> RETURN ; .)
    INT_LIT         reduce using rule 45 (return_stmt -> RETURN ; .)
    FALSE           reduce using rule 45 (return_stmt -> RETURN ; .)
    TRUE            reduce using rule 45 (return_stmt -> RETURN ; .)
    BOOL_LIT        reduce using rule 45 (return_stmt -> RETURN ; .)
    IDENT           reduce using rule 45 (return_stmt -> RETURN ; .)
    DEC             reduce using rule 45 (return_stmt -> RETURN ; .)
    INC             reduce using rule 45 (return_stmt -> RETURN ; .)
    (               reduce using rule 45 (return_stmt -> RETURN ; .)
    PLUS            reduce using rule 45 (return_stmt -> RETURN ; .)
    MINUS           reduce using rule 45 (return_stmt -> RETURN ; .)
    !               reduce using rule 45 (return_stmt -> RETURN ; .)
    ELSE            reduce using rule 45 (return_stmt -> RETURN ; .)


state 145

    (39) expr_stmt -> expr ; .
    }               reduce using rule 39 (expr_stmt -> expr ; .)
    BREAK           reduce using rule 39 (expr_stmt -> expr ; .)
    RETURN          reduce using rule 39 (expr_stmt -> expr ; .)
    FOR             reduce using rule 39 (expr_stmt -> expr ; .)
    WHILE           reduce using rule 39 (expr_stmt -> expr ; .)
    IF              reduce using rule 39 (expr_stmt -> expr ; .)
    {               reduce using rule 39 (expr_stmt -> expr ; .)
    ;               reduce using rule 39 (expr_stmt -> expr ; .)
    NEW             reduce using rule 39 (expr_stmt -> expr ; .)
    STRING_LIT      reduce using rule 39 (expr_stmt -> expr ; .)
    CHAR_LIT        reduce using rule 39 (expr_stmt -> expr ; .)
    FLOAT_LIT       reduce using rule 39 (expr_stmt -> expr ; .)
    INT_LIT         reduce using rule 39 (expr_stmt -> expr ; .)
    FALSE           reduce using rule 39 (expr_stmt -> expr ; .)
    TRUE            reduce using rule 39 (expr_stmt -> expr ; .)
    BOOL_LIT        reduce using rule 39 (expr_stmt -> expr ; .)
    IDENT           reduce using rule 39 (expr_stmt -> expr ; .)
    DEC             reduce using rule 39 (expr_stmt -> expr ; .)
    INC             reduce using rule 39 (expr_stmt -> expr ; .)
    (               reduce using rule 39 (expr_stmt -> expr ; .)
    PLUS            reduce using rule 39 (expr_stmt -> expr ; .)
    MINUS           reduce using rule 39 (expr_stmt -> expr ; .)
    !               reduce using rule 39 (expr_stmt -> expr ; .)
    ELSE            reduce using rule 39 (expr_stmt -> expr ; .)


state 146

    (41) for_stmt -> FOR ( . expr ; expr ; expr ) stmt
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 153

state 147

    (40) while_stmt -> WHILE ( . expr ) stmt
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 154

state 148

    (42) if_stmt -> IF ( . expr ) stmt ELSE stmt
    (43) if_stmt -> IF ( . expr ) stmt
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 155

state 149

    (25) local_decl -> type_spec IDENT [ . ] = expr ;
    (26) local_decl -> type_spec IDENT [ . ] ;
    ]               shift and go to state 156


state 150

    (27) local_decl -> type_spec IDENT = . expr ;
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 157

state 151

    (28) local_decl -> type_spec IDENT ; .
    CHAR            reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    FLOAT           reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    INT             reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    BOOL            reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    VOID            reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    }               reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    BREAK           reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    RETURN          reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    FOR             reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    WHILE           reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    IF              reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    {               reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    ;               reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    NEW             reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    STRING_LIT      reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    CHAR_LIT        reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    FLOAT_LIT       reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    INT_LIT         reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    FALSE           reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    TRUE            reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    BOOL_LIT        reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    IDENT           reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    DEC             reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    INC             reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    (               reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    PLUS            reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    MINUS           reduce using rule 28 (local_decl -> type_spec IDENT ; .)
    !               reduce using rule 28 (local_decl -> type_spec IDENT ; .)


state 152

    (44) return_stmt -> RETURN expr ; .
    }               reduce using rule 44 (return_stmt -> RETURN expr ; .)
    BREAK           reduce using rule 44 (return_stmt -> RETURN expr ; .)
    RETURN          reduce using rule 44 (return_stmt -> RETURN expr ; .)
    FOR             reduce using rule 44 (return_stmt -> RETURN expr ; .)
    WHILE           reduce using rule 44 (return_stmt -> RETURN expr ; .)
    IF              reduce using rule 44 (return_stmt -> RETURN expr ; .)
    {               reduce using rule 44 (return_stmt -> RETURN expr ; .)
    ;               reduce using rule 44 (return_stmt -> RETURN expr ; .)
    NEW             reduce using rule 44 (return_stmt -> RETURN expr ; .)
    STRING_LIT      reduce using rule 44 (return_stmt -> RETURN expr ; .)
    CHAR_LIT        reduce using rule 44 (return_stmt -> RETURN expr ; .)
    FLOAT_LIT       reduce using rule 44 (return_stmt -> RETURN expr ; .)
    INT_LIT         reduce using rule 44 (return_stmt -> RETURN expr ; .)
    FALSE           reduce using rule 44 (return_stmt -> RETURN expr ; .)
    TRUE            reduce using rule 44 (return_stmt -> RETURN expr ; .)
    BOOL_LIT        reduce using rule 44 (return_stmt -> RETURN expr ; .)
    IDENT           reduce using rule 44 (return_stmt -> RETURN expr ; .)
    DEC             reduce using rule 44 (return_stmt -> RETURN expr ; .)
    INC             reduce using rule 44 (return_stmt -> RETURN expr ; .)
    (               reduce using rule 44 (return_stmt -> RETURN expr ; .)
    PLUS            reduce using rule 44 (return_stmt -> RETURN expr ; .)
    MINUS           reduce using rule 44 (return_stmt -> RETURN expr ; .)
    !               reduce using rule 44 (return_stmt -> RETURN expr ; .)
    ELSE            reduce using rule 44 (return_stmt -> RETURN expr ; .)


state 153

    (41) for_stmt -> FOR ( expr . ; expr ; expr ) stmt
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               shift and go to state 158
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 154

    (40) while_stmt -> WHILE ( expr . ) stmt
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    )               shift and go to state 159
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 155

    (42) if_stmt -> IF ( expr . ) stmt ELSE stmt
    (43) if_stmt -> IF ( expr . ) stmt
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    )               shift and go to state 160
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 156

    (25) local_decl -> type_spec IDENT [ ] . = expr ;
    (26) local_decl -> type_spec IDENT [ ] . ;
    =               shift and go to state 161
    ;               shift and go to state 162


state 157

    (27) local_decl -> type_spec IDENT = expr . ;
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               shift and go to state 163
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 158

    (41) for_stmt -> FOR ( expr ; . expr ; expr ) stmt
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 164

state 159

    (40) while_stmt -> WHILE ( expr ) . stmt
    (31) stmt -> . break_stmt
    (32) stmt -> . return_stmt
    (33) stmt -> . for_stmt
    (34) stmt -> . while_stmt
    (35) stmt -> . if_stmt
    (36) stmt -> . compound_stmt
    (37) stmt -> . expr_stmt
    (46) break_stmt -> . BREAK ;
    (44) return_stmt -> . RETURN expr ;
    (45) return_stmt -> . RETURN ;
    (41) for_stmt -> . FOR ( expr ; expr ; expr ) stmt
    (40) while_stmt -> . WHILE ( expr ) stmt
    (42) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (43) if_stmt -> . IF ( expr ) stmt
    (22) compound_stmt -> . { local_decls stmt_list }
    (38) expr_stmt -> . ;
    (39) expr_stmt -> . expr ;
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    BREAK           shift and go to state 133
    RETURN          shift and go to state 135
    FOR             shift and go to state 137
    WHILE           shift and go to state 138
    IF              shift and go to state 139
    {               shift and go to state 79
    ;               shift and go to state 134
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 136
    stmt                           shift and go to state 165
    break_stmt                     shift and go to state 126
    return_stmt                    shift and go to state 127
    for_stmt                       shift and go to state 128
    while_stmt                     shift and go to state 129
    if_stmt                        shift and go to state 130
    compound_stmt                  shift and go to state 131
    expr_stmt                      shift and go to state 132

state 160

    (42) if_stmt -> IF ( expr ) . stmt ELSE stmt
    (43) if_stmt -> IF ( expr ) . stmt
    (31) stmt -> . break_stmt
    (32) stmt -> . return_stmt
    (33) stmt -> . for_stmt
    (34) stmt -> . while_stmt
    (35) stmt -> . if_stmt
    (36) stmt -> . compound_stmt
    (37) stmt -> . expr_stmt
    (46) break_stmt -> . BREAK ;
    (44) return_stmt -> . RETURN expr ;
    (45) return_stmt -> . RETURN ;
    (41) for_stmt -> . FOR ( expr ; expr ; expr ) stmt
    (40) while_stmt -> . WHILE ( expr ) stmt
    (42) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (43) if_stmt -> . IF ( expr ) stmt
    (22) compound_stmt -> . { local_decls stmt_list }
    (38) expr_stmt -> . ;
    (39) expr_stmt -> . expr ;
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    BREAK           shift and go to state 133
    RETURN          shift and go to state 135
    FOR             shift and go to state 137
    WHILE           shift and go to state 138
    IF              shift and go to state 139
    {               shift and go to state 79
    ;               shift and go to state 134
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 136
    stmt                           shift and go to state 166
    break_stmt                     shift and go to state 126
    return_stmt                    shift and go to state 127
    for_stmt                       shift and go to state 128
    while_stmt                     shift and go to state 129
    if_stmt                        shift and go to state 130
    compound_stmt                  shift and go to state 131
    expr_stmt                      shift and go to state 132

state 161

    (25) local_decl -> type_spec IDENT [ ] = . expr ;
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 167

state 162

    (26) local_decl -> type_spec IDENT [ ] ; .
    CHAR            reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    FLOAT           reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    INT             reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    BOOL            reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    VOID            reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    }               reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    BREAK           reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    RETURN          reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    FOR             reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    WHILE           reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    IF              reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    {               reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    ;               reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    NEW             reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    STRING_LIT      reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    CHAR_LIT        reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    FLOAT_LIT       reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    INT_LIT         reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    FALSE           reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    TRUE            reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    BOOL_LIT        reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    IDENT           reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    DEC             reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    INC             reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    (               reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    PLUS            reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    MINUS           reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)
    !               reduce using rule 26 (local_decl -> type_spec IDENT [ ] ; .)


state 163

    (27) local_decl -> type_spec IDENT = expr ; .
    CHAR            reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    FLOAT           reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    INT             reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    BOOL            reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    VOID            reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    }               reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    BREAK           reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    RETURN          reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    FOR             reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    WHILE           reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    IF              reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    {               reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    ;               reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    NEW             reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    STRING_LIT      reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    CHAR_LIT        reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    FLOAT_LIT       reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    INT_LIT         reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    FALSE           reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    TRUE            reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    BOOL_LIT        reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    IDENT           reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    DEC             reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    INC             reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    (               reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    PLUS            reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    MINUS           reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)
    !               reduce using rule 27 (local_decl -> type_spec IDENT = expr ; .)


state 164

    (41) for_stmt -> FOR ( expr ; expr . ; expr ) stmt
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               shift and go to state 168
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 165

    (40) while_stmt -> WHILE ( expr ) stmt .
    }               reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    BREAK           reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    RETURN          reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    FOR             reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    WHILE           reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    IF              reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    {               reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    ;               reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    NEW             reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    STRING_LIT      reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    CHAR_LIT        reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    FLOAT_LIT       reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    INT_LIT         reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    FALSE           reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    TRUE            reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    BOOL_LIT        reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    IDENT           reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    DEC             reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    INC             reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    (               reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    PLUS            reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    MINUS           reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    !               reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)
    ELSE            reduce using rule 40 (while_stmt -> WHILE ( expr ) stmt .)


state 166

    (42) if_stmt -> IF ( expr ) stmt . ELSE stmt
    (43) if_stmt -> IF ( expr ) stmt .
    }               reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    BREAK           reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    RETURN          reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    FOR             reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    WHILE           reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    IF              reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    {               reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    ;               reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    NEW             reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    STRING_LIT      reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    CHAR_LIT        reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    FLOAT_LIT       reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    INT_LIT         reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    FALSE           reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    TRUE            reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    BOOL_LIT        reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    IDENT           reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    DEC             reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    INC             reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    (               reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    PLUS            reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    MINUS           reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    !               reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)
    ELSE            reduce using rule 43 (if_stmt -> IF ( expr ) stmt .)


state 167

    (25) local_decl -> type_spec IDENT [ ] = expr . ;
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    ;               shift and go to state 170
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 168

    (41) for_stmt -> FOR ( expr ; expr ; . expr ) stmt
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 171

state 169

    (42) if_stmt -> IF ( expr ) stmt ELSE . stmt
    (31) stmt -> . break_stmt
    (32) stmt -> . return_stmt
    (33) stmt -> . for_stmt
    (34) stmt -> . while_stmt
    (35) stmt -> . if_stmt
    (36) stmt -> . compound_stmt
    (37) stmt -> . expr_stmt
    (46) break_stmt -> . BREAK ;
    (44) return_stmt -> . RETURN expr ;
    (45) return_stmt -> . RETURN ;
    (41) for_stmt -> . FOR ( expr ; expr ; expr ) stmt
    (40) while_stmt -> . WHILE ( expr ) stmt
    (42) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (43) if_stmt -> . IF ( expr ) stmt
    (22) compound_stmt -> . { local_decls stmt_list }
    (38) expr_stmt -> . ;
    (39) expr_stmt -> . expr ;
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    BREAK           shift and go to state 133
    RETURN          shift and go to state 135
    FOR             shift and go to state 137
    WHILE           shift and go to state 138
    IF              shift and go to state 139
    {               shift and go to state 79
    ;               shift and go to state 134
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 136
    stmt                           shift and go to state 172
    break_stmt                     shift and go to state 126
    return_stmt                    shift and go to state 127
    for_stmt                       shift and go to state 128
    while_stmt                     shift and go to state 129
    if_stmt                        shift and go to state 130
    compound_stmt                  shift and go to state 131
    expr_stmt                      shift and go to state 132

state 170

    (25) local_decl -> type_spec IDENT [ ] = expr ; .
    CHAR            reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    FLOAT           reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    INT             reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    BOOL            reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    VOID            reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    }               reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    BREAK           reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    RETURN          reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    FOR             reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    WHILE           reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    IF              reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    {               reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    ;               reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    NEW             reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    STRING_LIT      reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    CHAR_LIT        reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    FLOAT_LIT       reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    INT_LIT         reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    FALSE           reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    TRUE            reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    BOOL_LIT        reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    IDENT           reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    DEC             reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    INC             reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    (               reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    PLUS            reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    MINUS           reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)
    !               reduce using rule 25 (local_decl -> type_spec IDENT [ ] = expr ; .)


state 171

    (41) for_stmt -> FOR ( expr ; expr ; expr . ) stmt
    (67) expr -> expr . MOD expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . TIMES expr
    (70) expr -> expr . - expr
    (71) expr -> expr . + expr
    (72) expr -> expr . > expr
    (73) expr -> expr . GE expr
    (74) expr -> expr . < expr
    (75) expr -> expr . LE expr
    (76) expr -> expr . NE expr
    (77) expr -> expr . EQ expr
    (78) expr -> expr . AND expr
    (79) expr -> expr . OR expr
    )               shift and go to state 173
    MOD             shift and go to state 57
    DIVIDE          shift and go to state 58
    TIMES           shift and go to state 59
    -               shift and go to state 60
    +               shift and go to state 61
    >               shift and go to state 62
    GE              shift and go to state 63
    <               shift and go to state 64
    LE              shift and go to state 65
    NE              shift and go to state 66
    EQ              shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69


state 172

    (42) if_stmt -> IF ( expr ) stmt ELSE stmt .
    }               reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    BREAK           reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    RETURN          reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    FOR             reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    WHILE           reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    IF              reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    {               reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    ;               reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    NEW             reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    STRING_LIT      reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    CHAR_LIT        reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    FLOAT_LIT       reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    INT_LIT         reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    FALSE           reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    TRUE            reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    BOOL_LIT        reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    IDENT           reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    DEC             reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    INC             reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    (               reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    PLUS            reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    MINUS           reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    !               reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    ELSE            reduce using rule 42 (if_stmt -> IF ( expr ) stmt ELSE stmt .)


state 173

    (41) for_stmt -> FOR ( expr ; expr ; expr ) . stmt
    (31) stmt -> . break_stmt
    (32) stmt -> . return_stmt
    (33) stmt -> . for_stmt
    (34) stmt -> . while_stmt
    (35) stmt -> . if_stmt
    (36) stmt -> . compound_stmt
    (37) stmt -> . expr_stmt
    (46) break_stmt -> . BREAK ;
    (44) return_stmt -> . RETURN expr ;
    (45) return_stmt -> . RETURN ;
    (41) for_stmt -> . FOR ( expr ; expr ; expr ) stmt
    (40) while_stmt -> . WHILE ( expr ) stmt
    (42) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (43) if_stmt -> . IF ( expr ) stmt
    (22) compound_stmt -> . { local_decls stmt_list }
    (38) expr_stmt -> . ;
    (39) expr_stmt -> . expr ;
    (47) expr -> . NEW type_spec [ expr ]
    (48) expr -> . STRING_LIT
    (49) expr -> . CHAR_LIT
    (50) expr -> . FLOAT_LIT
    (51) expr -> . INT_LIT
    (52) expr -> . FALSE
    (53) expr -> . TRUE
    (54) expr -> . BOOL_LIT
    (55) expr -> . IDENT . SIZE
    (56) expr -> . IDENT ( args )
    (57) expr -> . IDENT [ expr ]
    (58) expr -> . IDENT DEC
    (59) expr -> . IDENT INC
    (60) expr -> . DEC IDENT
    (61) expr -> . INC IDENT
    (62) expr -> . IDENT
    (63) expr -> . ( expr )
    (64) expr -> . PLUS expr
    (65) expr -> . MINUS expr
    (66) expr -> . ! expr
    (67) expr -> . expr MOD expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr TIMES expr
    (70) expr -> . expr - expr
    (71) expr -> . expr + expr
    (72) expr -> . expr > expr
    (73) expr -> . expr GE expr
    (74) expr -> . expr < expr
    (75) expr -> . expr LE expr
    (76) expr -> . expr NE expr
    (77) expr -> . expr EQ expr
    (78) expr -> . expr AND expr
    (79) expr -> . expr OR expr
    (80) expr -> . IDENT [ expr ] = expr
    (81) expr -> . IDENT MODASSIGN expr
    (82) expr -> . IDENT DIVASSIGN expr
    (83) expr -> . IDENT MULASSIGN expr
    (84) expr -> . IDENT SUBASSIGN expr
    (85) expr -> . IDENT ADDASSIGN expr
    (86) expr -> . IDENT = expr
    BREAK           shift and go to state 133
    RETURN          shift and go to state 135
    FOR             shift and go to state 137
    WHILE           shift and go to state 138
    IF              shift and go to state 139
    {               shift and go to state 79
    ;               shift and go to state 134
    NEW             shift and go to state 26
    STRING_LIT      shift and go to state 27
    CHAR_LIT        shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    FALSE           shift and go to state 31
    TRUE            shift and go to state 32
    BOOL_LIT        shift and go to state 33
    IDENT           shift and go to state 24
    DEC             shift and go to state 35
    INC             shift and go to state 36
    (               shift and go to state 34
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    !               shift and go to state 39

    expr                           shift and go to state 136
    stmt                           shift and go to state 174
    break_stmt                     shift and go to state 126
    return_stmt                    shift and go to state 127
    for_stmt                       shift and go to state 128
    while_stmt                     shift and go to state 129
    if_stmt                        shift and go to state 130
    compound_stmt                  shift and go to state 131
    expr_stmt                      shift and go to state 132

state 174

    (41) for_stmt -> FOR ( expr ; expr ; expr ) stmt .
    }               reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    BREAK           reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    RETURN          reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    FOR             reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    WHILE           reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    IF              reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    {               reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    ;               reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    NEW             reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    STRING_LIT      reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    CHAR_LIT        reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    FLOAT_LIT       reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    INT_LIT         reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    FALSE           reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    TRUE            reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    BOOL_LIT        reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    IDENT           reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    DEC             reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    INC             reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    (               reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    PLUS            reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    MINUS           reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    !               reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
    ELSE            reduce using rule 41 (for_stmt -> FOR ( expr ; expr ; expr ) stmt .)
